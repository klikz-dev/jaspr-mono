# Generated by Django 2.2.13 on 2020-08-12 22:55

from itertools import chain

from django.db import migrations


def unarchive_patient_coping_strategies_that_should_be(apps, schema_editor):
    Assessment = apps.get_model("kiosk", "Assessment")
    CopingStrategy = apps.get_model("kiosk", "CopingStrategy")
    PatientCopingStrategy = apps.get_model("kiosk", "PatientCopingStrategy")

    coping_fields = [
        "coping_top",
        "coping_body",
        "coping_distract",
        "coping_help_others",
        "coping_courage",
        "coping_senses",
    ]

    regular_coping_strategies = frozenset(
        CopingStrategy.objects.values_list("title", flat=True).distinct(),
    )

    num_updated = 0
    for patient_coping_strategy in PatientCopingStrategy.objects.filter(
        status="archived"
    ):
        title = patient_coping_strategy.title
        if title in regular_coping_strategies:
            continue

        assessment = Assessment.objects.filter(
            patient_id=patient_coping_strategy.patient_id
        ).last()

        all_coping_values = frozenset(
            chain(
                *map(
                    lambda v: [] if not v else v,
                    (getattr(assessment, field_name) for field_name in coping_fields),
                )
            )
        )

        if title in all_coping_values:
            patient_coping_strategy.status = "active"
            patient_coping_strategy.save(update_fields=["status"])
            num_updated += 1

    print(f"{num_updated} patient coping strategies updated.")


class Migration(migrations.Migration):

    dependencies = [
        ("kiosk", "0013_auto_20200811_1710"),
    ]

    operations = [
        migrations.RunPython(
            unarchive_patient_coping_strategies_that_should_be,
            # Backwards migrations shouldn't need to happen, but just in case, nothing
            # should need to be done because this is a data integrity fix (so backwards
            # we'll just keep the data as is). Forwards can also be called multiple
            # times in a row and should be fine (will fix whatever is present to fix)!
            lambda apps, schema_editor: ...,
            # This migration can be removed when/if migrations are squashed and all
            # applied, etc.
            elidable=True,
        )
    ]
