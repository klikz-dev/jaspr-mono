# Generated by Django 2.2.24 on 2021-11-30 18:22

from django.conf import settings
from django.db import migrations, models
import django.utils.timezone
import model_utils.fields
import fernet_fields.fields
import simple_history.models
import jaspr.apps.common.fields.encrypted_positive_small_integer_field
import jaspr.apps.common.fields.encrypted_small_integer_field


class Migration(migrations.Migration):

    dependencies = [
        ('kiosk', '0063_auto_20211011_1636'),
    ]

    operations = [

        ### Update Encounter
        migrations.AddField(
            model_name='encounter',
            name='end_time',
            field=fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='Session end time', null=True),
        ),
        migrations.AddField(
            model_name='encounter',
            name='start_time',
            field=fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='Session start time', null=True),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='end_time',
            field=fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='Session end time', null=True),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='start_time',
            field=fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='Session start time', null=True),
        ),
        migrations.AddField(
            model_name='encounter',
            name='current_section_uid',
            field=fernet_fields.fields.EncryptedCharField(blank=True, max_length=63, null=True,
                                                          verbose_name='Current Section UID'),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='current_section_uid',
            field=fernet_fields.fields.EncryptedCharField(blank=True, max_length=63, null=True,
                                                          verbose_name='Current Section UID'),
        ),

        ### UPDATE SRAT
        migrations.AddField(
            model_name='historicalsrat',
            name='rate_psych_section_viewed',
            field=fernet_fields.fields.EncryptedDateTimeField(blank=True,
                                                              help_text='rate_psych section first viewed at this datetime.',
                                                              null=True),
        ),
        migrations.AddField(
            model_name='historicalsrat',
            name='scoring_current_attempt',
            field=fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Current Attempt', 'Current Attempt'), (
                'No Current Attempt', 'No Current Attempt')], default=None, editable=False, max_length=31, null=True,
                                                          verbose_name='Scoring - Current Attempt'),
        ),
        migrations.AddField(
            model_name='historicalsrat',
            name='scoring_risk',
            field=fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Low', 'Low'), ('Moderate', 'Moderate'),
                                                                               ('High', 'High')], default=None,
                                                          editable=False, max_length=15, null=True,
                                                          verbose_name='Scoring - Risk'),
        ),
        migrations.AddField(
            model_name='historicalsrat',
            name='scoring_score',
            field=jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                blank=True, default=None, editable=False, null=True,
                validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)],
                verbose_name='Scoring - Score'),
        ),
        migrations.AddField(
            model_name='historicalsrat',
            name='scoring_suicide_index_score',
            field=jaspr.apps.common.fields.encrypted_small_integer_field.EncryptedSmallIntegerField(blank=True,
                                                                                                    default=None,
                                                                                                    editable=False,
                                                                                                    null=True,
                                                                                                    validators=[
                                                                                                        django.core.validators.MinValueValidator(
                                                                                                            -2),
                                                                                                        django.core.validators.MaxValueValidator(
                                                                                                            2)],
                                                                                                    verbose_name='Scoring - Suicide Index Score'),
        ),
        migrations.AddField(
            model_name='historicalsrat',
            name='scoring_suicide_index_score_typology',
            field=fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Wish to Live', 'Wish to Live'),
                                                                               ('Ambivalent', 'Ambivalent'),
                                                                               ('Wish to Die', 'Wish to Die')],
                                                          default=None, editable=False, max_length=15, null=True,
                                                          verbose_name='Scoring - Suicide Index Score Typology'),
        ),
        migrations.AddField(
            model_name='historicalsrat',
            name='scoring_suicide_plan_and_intent',
            field=fernet_fields.fields.EncryptedCharField(blank=True, choices=[
                ('Suicide Plan and Intent', 'Suicide Plan and Intent'),
                ('Suicide Plan or Intent', 'Suicide Plan or Intent'),
                ('No Suicide Plan or Intent', 'No Suicide Plan or Intent')], default=None, editable=False,
                                                          max_length=31, null=True,
                                                          verbose_name='Scoring - Suicide Plan and Intent'),
        ),
        migrations.AddField(
            model_name='srat',
            name='rate_psych_section_viewed',
            field=fernet_fields.fields.EncryptedDateTimeField(blank=True,
                                                              help_text='rate_psych section first viewed at this datetime.',
                                                              null=True),
        ),
        migrations.AddField(
            model_name='srat',
            name='scoring_current_attempt',
            field=fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Current Attempt', 'Current Attempt'), (
                'No Current Attempt', 'No Current Attempt')], default=None, editable=False, max_length=31, null=True,
                                                          verbose_name='Scoring - Current Attempt'),
        ),
        migrations.AddField(
            model_name='srat',
            name='scoring_risk',
            field=fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Low', 'Low'), ('Moderate', 'Moderate'),
                                                                               ('High', 'High')], default=None,
                                                          editable=False, max_length=15, null=True,
                                                          verbose_name='Scoring - Risk'),
        ),
        migrations.AddField(
            model_name='srat',
            name='scoring_score',
            field=jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                blank=True, default=None, editable=False, null=True,
                validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)],
                verbose_name='Scoring - Score'),
        ),
        migrations.AddField(
            model_name='srat',
            name='scoring_suicide_index_score',
            field=jaspr.apps.common.fields.encrypted_small_integer_field.EncryptedSmallIntegerField(blank=True,
                                                                                                    default=None,
                                                                                                    editable=False,
                                                                                                    null=True,
                                                                                                    validators=[
                                                                                                        django.core.validators.MinValueValidator(
                                                                                                            -2),
                                                                                                        django.core.validators.MaxValueValidator(
                                                                                                            2)],
                                                                                                    verbose_name='Scoring - Suicide Index Score'),
        ),
        migrations.AddField(
            model_name='srat',
            name='scoring_suicide_index_score_typology',
            field=fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Wish to Live', 'Wish to Live'),
                                                                               ('Ambivalent', 'Ambivalent'),
                                                                               ('Wish to Die', 'Wish to Die')],
                                                          default=None, editable=False, max_length=15, null=True,
                                                          verbose_name='Scoring - Suicide Index Score Typology'),
        ),
        migrations.AddField(
            model_name='srat',
            name='scoring_suicide_plan_and_intent',
            field=fernet_fields.fields.EncryptedCharField(blank=True, choices=[
                ('Suicide Plan and Intent', 'Suicide Plan and Intent'),
                ('Suicide Plan or Intent', 'Suicide Plan or Intent'),
                ('No Suicide Plan or Intent', 'No Suicide Plan or Intent')], default=None, editable=False,
                                                          max_length=31, null=True,
                                                          verbose_name='Scoring - Suicide Plan and Intent'),
        ),
        migrations.AddField(
            model_name='patientmeasurements',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='kiosk.Encounter', verbose_name='Encounter'),
        ),
        migrations.AddField(
            model_name='providercomment',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='kiosk.Encounter', verbose_name='Encounter'),
        ),

        migrations.RemoveConstraint(
            model_name='patientcopingstrategy',
            name='patientcopingstrategy_title_and_patient_session_unique_together',
        ),

        migrations.AddField(
            model_name='historicalpatientcopingstrategy',
            name='encounter',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                    to='kiosk.Encounter'),
        ),
        migrations.AddField(
            model_name='patientcopingstrategy',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='kiosk.Encounter'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='action',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='kiosk.Encounter'),
        ),

        migrations.CreateModel(
            name='ComfortAndSkills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                                verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                                      verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('archived', 'Archived')],
                                                          default='active', max_length=100, no_check_for_status=True)),
            ],
            options={
                'verbose_name': 'Comfort and Skills',
                'verbose_name_plural': 'Comfort and Skills',
            },
        ),
        migrations.CreateModel(
            name='HistoricalComfortAndSkills',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                                verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                                      verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('choice1', 'choice1'), ('choice2', 'choice2')],
                                                          default='choice1', max_length=100, no_check_for_status=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type',
                 models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+',
                                   to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Comfort and Skills',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),

        migrations.CreateModel(
            name='HistoricalLethalMeans',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                                verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                                      verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('choice1', 'choice1'), ('choice2', 'choice2')],
                                                          default='choice1', max_length=100, no_check_for_status=True)),
                ('answers', jaspr.apps.common.fields.encrypted_json_field.EncryptedJSONField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type',
                 models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+',
                                   to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Lethal Means Counseling',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='LethalMeans',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                                verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                                      verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('archived', 'Archived')],
                                                          default='active', max_length=100, no_check_for_status=True)),
                ('answers', jaspr.apps.common.fields.encrypted_json_field.EncryptedJSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Lethal Means Counseling',
                'verbose_name_plural': 'Lethal Means Counselings',
            },
        ),

        migrations.AddField(
            model_name='amendment',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='kiosk.Encounter'),
        ),
        migrations.AddField(
            model_name='historicalamendment',
            name='encounter',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                    to='kiosk.Encounter'),
        ),

        migrations.CreateModel(
            name='AssignedActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                                verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                                      verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('archived', 'Archived')],
                                                          default='active', max_length=100, no_check_for_status=True)),
                ('start_time', models.DateTimeField(verbose_name='Start Time', blank=True, null=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kiosk.Encounter')),
                ('intro', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                               to='kiosk.CustomOnboardingQuestions'),),
                ('lethal_means',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      to='kiosk.LethalMeans'),),
                ('stability_plan',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      to='kiosk.CrisisStabilityPlan')),
                ('suicide_assessment',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      to='kiosk.Srat'),),
                ('comfort_and_skills',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      to='kiosk.ComfortAndSkills')),
                ('outro', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                               to='kiosk.Outro')),
                ('activity_status', models.CharField(
                    choices=[('not-started', 'not-started'), ('in-progress', 'in-progress'), ('updated', 'updated'),
                             ('completed', 'completed')], default='not-started', max_length=50,
                    verbose_name='Activity Status')
                 ),
                ('activity_status_updated',
                 models.DateTimeField(blank=True, null=True, verbose_name='Activity Status Updated')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RenameModel('AssessmentLocks', 'AssignmentLocks'),
        migrations.AddField(
            model_name='assignmentlocks',
            name='activity',
            field=models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='kiosk.AssignedActivity'),
        ),
        migrations.AlterField(
            model_name='assignmentlocks',
            name='acknowledged',
            field=models.BooleanField(default=False,
                                      help_text='Indicates whether the patient has acknowledge the assignment lock change'),
        ),
        migrations.AlterField(
            model_name='assignmentlocks',
            name='locked',
            field=models.BooleanField(default=False, help_text='Indicates whether or not the assignment is locked',
                                      verbose_name='Locked?'),
        ),
    ]
