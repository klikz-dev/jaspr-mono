# Generated by Django 2.2.24 on 2021-06-10 21:40
import datetime

from django.db import migrations
from django.core.management import call_command

SECURITY_QUESTION_TO_ENCOUNTER = (
    "encrypted_answer",
    "encrypted_question",
)

PATIENT_TO_ENCOUNTER = (
    "last_heartbeat",
    "privacy_screen_image",
    "session_lock",
    "session_validation_attempts"
)

ASSESSMENT_TO_ENCOUNTER = (
    "created",
    "modified",
)
ASSESSMENT_TO_PATIENT_SESSION = (
    "created",
    "modified",
    "status",
    ("created", "start_time",),
    "current_section_uid",
    "interview_progress_section",
    "rate_psych_section_viewed",
    "scoring_score",
    "scoring_current_attempt",
    "scoring_suicide_plan_and_intent",
    "scoring_risk",
    "scoring_suicide_index_score",
    "scoring_suicide_index_score_typology"
)
ASSESSMENT_TO_CSP = (
    'created',
    'modified',
    'status',
    'reasons_live',
    'strategies_general',
    'strategies_firearm',
    'strategies_medicine',
    'strategies_places',
    'strategies_other',
    'strategies_custom',
    'means_support_yes_no',
    'means_support_who',
    'coping_body',
    'coping_distract',
    'coping_help_others',
    'coping_courage',
    'coping_senses',
    'supportive_people',
    'coping_top',
    'ws_stressors',
    'ws_thoughts',
    'ws_feelings',
    'ws_actions',
    'ws_top'
)
ASSESSMENT_TO_SRAT_ANSWERS = [
    'rate_psych', 'most_painful', 'rate_stress', 'most_stress', 'rate_agitation',
    'causes_agitation', 'rate_hopeless', 'most_hopeless', 'rate_self_hate', 'most_hate',
    'rank_feelings', 'suicide_risk', 'suicidal_yourself', 'suicidal_others', 'reasons_live',
    'reasons_die', 'reasons_live', 'reasons_die', 'wish_live', 'wish_die', 'one_thing',
    'suicidal_yes_no', 'suicidal_yes_no_describe', 'suicidal_freq', 'suicidal_freq_units',
    'length_suicidal_thought', 'worse_yes_no', 'worse_yes_no_describe', 'plan_yes_no',
    'plan_yes_no_describe', 'means_yes_no', 'means_yes_no_describe', 'firearms_yes_no',
    'firearms_yes_no_describe', 'steps_yes_no', 'steps_yes_no_describe', 'practiced_yes_no',
    'practiced_yes_no_describe', 'current_yes_no', 'current_yes_no_describe', 'intent_yes_no',
    'intent_yes_no_describe', 'times_tried', 'times_tried_describe', 'nssi_yes_no',
    'nssi_yes_no_describe', 'hospitalized_yes_no', 'hospitalized_yes_no_describe',
    'impulsive_yes_no', 'impulsive_yes_no_describe', 'abuse_yes_no', 'abuse_yes_no_describe',
    'losses_yes_no', 'losses_yes_no_describe', 'relationship_yes_no',
    'relationship_yes_no_describe', 'burden_on_others_yes_no',
    'burden_on_others_yes_no_describe', 'health_yes_no', 'health_yes_no_describe',
    'sleep_yes_no', 'sleep_yes_no_describe', 'legal_yes_no', 'legal_yes_no_describe',
    'shame_yes_no', 'shame_yes_no_describe', 'skip_lethal_means', 'skip_reason',
    'too_private_dec', 'overreact_specific', 'overreact_take_away_dec',
    'overreact_keep_me_dec', 'reason_not_sure_talk', 'not_sure_talk_dec', 'too_shameful_dec',
    'do_not_need_dec', 'cannot_rid_means_dec', 'stable_dec', 'keep_means_dec',
    'keep_in_hospital_dec', 'feel_depressed_dec', 'means_yes_no', 'means_yes_no_describe',
    'strategies_general', 'strategies_firearm', 'strategies_medicine', 'strategies_places',
    'strategies_other', 'strategies_custom', 'means_support_yes_no', 'means_support_who',
    'means_willing', 'crisis_desc', 'coping_body', 'coping_distract', 'coping_help_others',
    'coping_courage', 'coping_senses', 'supportive_people', 'coping_top', 'reasons_live',
    'ws_stressors', 'ws_thoughts', 'ws_feelings', 'ws_actions', 'ws_top',
    'stability_rehearsal', 'stability_confidence', 'willing_to_talk', 'readiness',
    'readiness_no', 'readiness_yes_reasons', 'readiness_yes_changed', 'walk_through',
    'distress1', 'frustration1', 'jaspr_rating', 'jaspr_recommend', 'overall_er_care',
    'will_check_in'
]
ASSESSMENT_TO_ONBOARDING_QUESTIONS = (
    "time_here",
    "distress0",
    "frustration0",
    "check_in_time0"
)


def copy_props(from_obj, to_obj, props):
    for item in props:
        if isinstance(item, tuple):
            from_prop, to_prop = item
        else:
            from_prop = to_prop = item
        value = getattr(from_obj, from_prop)
        setattr(to_obj, to_prop, value)


def migrate_to_json_field(from_obj, migration):
    prop_dict = {}
    for item in migration:
        if isinstance(item, tuple):
            from_prop, to_prop = item
        else:
            from_prop = to_prop = item
        value = getattr(from_obj, from_prop)
        if isinstance(value, (datetime.datetime, datetime.date)):
            value = value.isoformat()
        prop_dict[to_prop] = value
    return prop_dict


def migrate_model(from_obj, to_model, migration):
    instance = to_model()
    copy_props(from_obj, instance, migration)
    return instance


def add_csp_and_ssi_fixtures(apps, schema_editor):
    call_command('loaddata', 'jaspr/apps/bootstrap/fixtures/jaspr_media.json', verbosity=2)
    call_command('loaddata', 'jaspr/apps/bootstrap/fixtures/jaspr_ssi.json', verbosity=2)


def is_empty(value):
    if value is None or value == "":
        return True
    return False


def convert_assessment_to_encounter(apps, schema_editor):
    pass



def create_jah_accounts(apps, schema_editor):
    Patient = apps.get_model("kiosk", "Patient")
    JAHAccount = apps.get_model("jah", "JAHAccount")
    Assessment = apps.get_model("kiosk", "Assessment")
    CrisisStabilityPlan = apps.get_model("jah", "CrisisStabilityPlan")

    for patient in Patient.objects.all():
        if patient.tools_to_go_status == "Setup Finished":
            jah_account = JAHAccount.objects.create(
                status="active",
                patient=patient
            )

            assessment = Assessment.objects.filter(patient=patient).first()
            if assessment is not None:
                crisis_stability_plan = migrate_model(assessment, CrisisStabilityPlan, ASSESSMENT_TO_CSP)
                crisis_stability_plan.jah_account = jah_account
                crisis_stability_plan.save()


def create_jah_patient_coping_strategy(apps, schema_editor):
    JAHPatientCopingStrategy = apps.get_model("jah", "PatientCopingStrategy")
    RegPatientCopingStrategy = apps.get_model("kiosk", "PatientCopingStrategy")
    JAHAccount = apps.get_model("jah", "JAHAccount")

    for rpcs in RegPatientCopingStrategy.objects.all():
        # This code sucks.
        # Python3 must have a better way to handle None checking through object hierarchies.
        if rpcs.patient_session is None:
            continue

        if rpcs.patient_session.encounter is None:
            continue

        if rpcs.patient_session.encounter.patient is None:
            continue

        patient = rpcs.patient_session.encounter.patient
        jah_account = JAHAccount.objects.get(patient=patient)
        if jah_account is None:
            continue

        if patient.tools_to_go_status == "Setup Finished":
            jah_pcs = migrate_model(rpcs, JAHPatientCopingStrategy, ASSESSMENT_TO_CSP)
            jah_pcs.jah_account = jah_account
            jah_pcs.save()


def add_encounter_to_activate_record(apps, schema_editor):
    ActivateRecord = apps.get_model("kiosk", "ActivateRecord")
    Encounter = apps.get_model("kiosk", "Encounter")
    for record in ActivateRecord.objects.all():
        try:
            record.encounter = Encounter.objects.filter(patient=record.patient,
                                                    department=record.patient.department).first()
            record.save()
        except:
            pass


def add_encounter_to_patient_video(apps, schema_editor):
    PatientVideo = apps.get_model("kiosk", "PatientVideo")
    Encounter = apps.get_model("kiosk", "Encounter")
    for video in PatientVideo.objects.all():
        try:
            video.encounter = Encounter.objects.filter(patient=video.patient, department=video.patient.department).first()
            video.save()
        except:
            pass


class Migration(migrations.Migration):
    dependencies = [
        ('kiosk', '0038_auto_20210610_1632'),
        ('jah', '0002_auto_20210610_1632')
    ]

    operations = [
        #migrations.RunPython(add_csp_and_ssi_fixtures),
        #migrations.RunPython(convert_assessment_to_encounter),
        #migrations.RunPython(add_encounter_to_activate_record),
        #migrations.RunPython(add_encounter_to_patient_video),
        #migrations.RunPython(create_jah_accounts),
        #migrations.RunPython(create_jah_patient_coping_strategy)
    ]

