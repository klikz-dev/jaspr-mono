# Generated by Django 2.2.24 on 2021-06-10 21:32

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import fernet_fields.fields
import jaspr.apps.common.fields.encrypted_array_field
import jaspr.apps.common.fields.encrypted_small_integer_field
import model_utils.fields
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('awsmedia', '0004_auto_20201026_1453'),
        ('clinics', '0023_auto_20210610_1632'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('kiosk', '0037_merge_20210506_1156'),
    ]

    operations = [
        migrations.CreateModel(
            name='PatientDepartmentSharing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('archived', 'Archived')],
                                                          default='active', max_length=100, no_check_for_status=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('department',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='clinics.Department',
                                   verbose_name='Department')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kiosk.Patient',
                                              verbose_name='Patient')),
            ],
            options={
                'verbose_name': 'PatientDepartmentSharing',
                'verbose_name_plural': 'PatientDepartmentSharings',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPatientDepartmentSharing',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('choice1', 'choice1'), ('choice2', 'choice2')],
                                                          default='choice1', max_length=100, no_check_for_status=True)),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('modified', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type',
                 models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('department', models.ForeignKey(blank=True, db_constraint=False, null=True,
                                                 on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                                 to='clinics.Department', verbose_name='Department')),
                ('history_user',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+',
                                   to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True,
                                              on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                              to='kiosk.Patient', verbose_name='Patient')),
            ],
            options={
                'verbose_name': 'historical PatientDepartmentSharing',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='CrisisStabilityPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('archived', 'Archived')], default='active', max_length=100, no_check_for_status=True)),
                ('reasons_live', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=5)),
                ('strategies_general', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_firearm', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_medicine', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_places', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_other', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_custom', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('means_support_yes_no', jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(null=True)),
                ('means_support_who', fernet_fields.fields.EncryptedCharField(blank=True, max_length=10000, null=True)),
                ('coping_body', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('coping_distract', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('coping_help_others', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('coping_courage', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('coping_senses', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('supportive_people', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(), blank=True, null=True, size=None)),
                ('coping_top', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_stressors', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_thoughts', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_feelings', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_actions', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_top', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
            ],
            options={
                'verbose_name': 'Crisis Stability Plan',
                'verbose_name_plural': 'Crisis Stability Plans',
            },
        ),
        migrations.CreateModel(
            name='CustomOnboardingQuestions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('archived', 'Archived')], default='active', max_length=100, no_check_for_status=True)),
                ('answers', jaspr.apps.common.fields.encrypted_json_field.EncryptedJSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Custom Onboarding Question',
                'verbose_name_plural': 'Custom Onboarding Questions',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCrisisStabilityPlan',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('choice1', 'choice1'), ('choice2', 'choice2')], default='choice1', max_length=100, no_check_for_status=True)),
                ('reasons_live', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=5)),
                ('strategies_general', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_firearm', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_medicine', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_places', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_other', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('strategies_custom', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('means_support_yes_no', jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(null=True)),
                ('means_support_who', fernet_fields.fields.EncryptedCharField(blank=True, max_length=10000, null=True)),
                ('coping_body', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('coping_distract', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('coping_help_others', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('coping_courage', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('coping_senses', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('supportive_people', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(), blank=True, null=True, size=None)),
                ('coping_top', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_stressors', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_thoughts', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_feelings', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_actions', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('ws_top', jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(base_field=models.CharField(max_length=10000), blank=True, null=True, size=None)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Crisis Stability Plan',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCustomOnboardingQuestions',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('choice1', 'choice1'), ('choice2', 'choice2')], default='choice1', max_length=100, no_check_for_status=True)),
                ('answers', jaspr.apps.common.fields.encrypted_json_field.EncryptedJSONField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Custom Onboarding Question',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatientSession',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('choice1', 'choice1'), ('choice2', 'choice2')], default='choice1', max_length=100, no_check_for_status=True)),
                ('start_time', fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='Encounter start time', null=True)),
                ('end_time', fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='Encounter end time', null=True)),
                ('current_section_uid', fernet_fields.fields.EncryptedCharField(blank=True, max_length=63, null=True, verbose_name='Current Section UID')),
                ('interview_progress_section', models.CharField(choices=[('Initial', 'Initial'), ('SSF-A/B', 'SSF-A/B'), ('Lethal Means', 'Lethal Means'), ('Plan to Cope', 'Plan to Cope')], default='Initial', max_length=12, verbose_name='Interview Progress Section')),
                ('rate_psych_section_viewed', fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='rate_psych section first viewed at this datetime.', null=True)),
                ('scoring_score', jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(blank=True, default=None, editable=False, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)], verbose_name='Scoring - Score')),
                ('scoring_current_attempt', fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Current Attempt', 'Current Attempt'), ('No Current Attempt', 'No Current Attempt')], default=None, editable=False, max_length=31, null=True, verbose_name='Scoring - Current Attempt')),
                ('scoring_suicide_plan_and_intent', fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Suicide Plan and Intent', 'Suicide Plan and Intent'), ('Suicide Plan or Intent', 'Suicide Plan or Intent'), ('No Suicide Plan or Intent', 'No Suicide Plan or Intent')], default=None, editable=False, max_length=31, null=True, verbose_name='Scoring - Suicide Plan and Intent')),
                ('scoring_risk', fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Low', 'Low'), ('Moderate', 'Moderate'), ('High', 'High')], default=None, editable=False, max_length=15, null=True, verbose_name='Scoring - Risk')),
                ('scoring_suicide_index_score', jaspr.apps.common.fields.encrypted_small_integer_field.EncryptedSmallIntegerField(blank=True, default=None, editable=False, null=True, validators=[django.core.validators.MinValueValidator(-2), django.core.validators.MaxValueValidator(2)], verbose_name='Scoring - Suicide Index Score')),
                ('scoring_suicide_index_score_typology', fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Wish to Live', 'Wish to Live'), ('Ambivalent', 'Ambivalent'), ('Wish to Die', 'Wish to Die')], default=None, editable=False, max_length=15, null=True, verbose_name='Scoring - Suicide Index Score Typology')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Patient Session',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSrat',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('choice1', 'choice1'), ('choice2', 'choice2')], default='choice1', max_length=100, no_check_for_status=True)),
                ('answers', jaspr.apps.common.fields.encrypted_json_field.EncryptedJSONField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Suicide Risk Assessment Type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='PatientMeasurements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('archived', 'Archived')], default='active', max_length=100, no_check_for_status=True)),
                ('frustration', jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('distress', jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('screen', models.CharField(help_text='Screen where the measurement occurred', max_length=50)),
                ('ux_format', models.CharField(help_text='UX Format of the measurement', max_length=50)),
            ],
            options={
                'verbose_name': 'Patient Measurement',
                'verbose_name_plural': 'Patient Measurements',
            },
        ),
        migrations.CreateModel(
            name='PatientSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('archived', 'Archived')], default='active', max_length=100, no_check_for_status=True)),
                ('start_time', fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='Encounter start time', null=True)),
                ('end_time', fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='Encounter end time', null=True)),
                ('current_section_uid', fernet_fields.fields.EncryptedCharField(blank=True, max_length=63, null=True, verbose_name='Current Section UID')),
                ('interview_progress_section', models.CharField(choices=[('Initial', 'Initial'), ('SSF-A/B', 'SSF-A/B'), ('Lethal Means', 'Lethal Means'), ('Plan to Cope', 'Plan to Cope')], default='Initial', max_length=12, verbose_name='Interview Progress Section')),
                ('rate_psych_section_viewed', fernet_fields.fields.EncryptedDateTimeField(blank=True, help_text='rate_psych section first viewed at this datetime.', null=True)),
                ('scoring_score', jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(blank=True, default=None, editable=False, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)], verbose_name='Scoring - Score')),
                ('scoring_current_attempt', fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Current Attempt', 'Current Attempt'), ('No Current Attempt', 'No Current Attempt')], default=None, editable=False, max_length=31, null=True, verbose_name='Scoring - Current Attempt')),
                ('scoring_suicide_plan_and_intent', fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Suicide Plan and Intent', 'Suicide Plan and Intent'), ('Suicide Plan or Intent', 'Suicide Plan or Intent'), ('No Suicide Plan or Intent', 'No Suicide Plan or Intent')], default=None, editable=False, max_length=31, null=True, verbose_name='Scoring - Suicide Plan and Intent')),
                ('scoring_risk', fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Low', 'Low'), ('Moderate', 'Moderate'), ('High', 'High')], default=None, editable=False, max_length=15, null=True, verbose_name='Scoring - Risk')),
                ('scoring_suicide_index_score', jaspr.apps.common.fields.encrypted_small_integer_field.EncryptedSmallIntegerField(blank=True, default=None, editable=False, null=True, validators=[django.core.validators.MinValueValidator(-2), django.core.validators.MaxValueValidator(2)], verbose_name='Scoring - Suicide Index Score')),
                ('scoring_suicide_index_score_typology', fernet_fields.fields.EncryptedCharField(blank=True, choices=[('Wish to Live', 'Wish to Live'), ('Ambivalent', 'Ambivalent'), ('Wish to Die', 'Wish to Die')], default=None, editable=False, max_length=15, null=True, verbose_name='Scoring - Suicide Index Score Typology')),
            ],
            options={
                'verbose_name': 'Patient Session',
                'verbose_name_plural': 'Patient Sessions',
            },
        ),
        migrations.CreateModel(
            name='Srat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('archived', 'Archived')], default='active', max_length=100, no_check_for_status=True)),
                ('answers', jaspr.apps.common.fields.encrypted_json_field.EncryptedJSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Suicide Risk Assessment Type',
                'verbose_name_plural': 'Suicide Risk Assessment Types',
            },
        ),
        #migrations.AddField(
        #    model_name='encounter',
        #    name='account_locked_at',
        #    field=models.DateTimeField(blank=True, null=True, verbose_name='Account Locked At'),
        #),
        migrations.AddField(
            model_name='encounter',
            name='department',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='clinics.Department', verbose_name='Department'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='encrypted_answer',
            field=fernet_fields.fields.EncryptedCharField(default=' ', max_length=255, verbose_name='Security Answer'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='encrypted_question',
            field=fernet_fields.fields.EncryptedCharField(default=' ', max_length=255, verbose_name='Security Question'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='fhir_id',
            field=models.CharField(max_length=256, verbose_name="FHIR IDs", null=True),
        ),
        migrations.AddField(
            model_name='encounter',
            name='last_heartbeat',
            field=models.DateTimeField(blank=True, help_text='Last time frontend pinged backend using heartbeat endpoint.', null=True, verbose_name='Last Heartbeat'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='privacy_screen_image',
            field=models.ForeignKey(blank=True, help_text='This image has been chosen by this patient to be the image they use in their privacy screen.', null=True, on_delete=django.db.models.deletion.PROTECT, to='awsmedia.PrivacyScreenImage', verbose_name='Chosen Privacy Screen Image'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='session_lock',
            field=models.BooleanField(default=False, help_text='When True, patient must validate session to gain access to endpoints requiring recent heartbeat.', verbose_name='Session Lock'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='session_validation_attempts',
            field=models.PositiveSmallIntegerField(default=0, help_text='Number of times that session-validate has been called without success up to 6.  After 6 attempts, all further attempts are failed automatically without recording.', verbose_name='Session Validation Attempts'),
        ),
        #migrations.AddField(
        #    model_name='historicalencounter',
        #    name='account_locked_at',
        #    field=models.DateTimeField(blank=True, null=True, verbose_name='Account Locked At'),
        #),
        migrations.AddField(
            model_name='historicalencounter',
            name='department',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='clinics.Department', verbose_name='Department'),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='encrypted_answer',
            field=fernet_fields.fields.EncryptedCharField(default=' ', max_length=255, verbose_name='Security Answer'),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='encrypted_question',
            field=fernet_fields.fields.EncryptedCharField(default=' ', max_length=255, verbose_name='Security Question'),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='fhir_id',
            field=models.CharField(max_length=256, verbose_name="FHIR IDs", null=True),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='last_heartbeat',
            field=models.DateTimeField(blank=True, help_text='Last time frontend pinged backend using heartbeat endpoint.', null=True, verbose_name='Last Heartbeat'),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='privacy_screen_image',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='This image has been chosen by this patient to be the image they use in their privacy screen.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='awsmedia.PrivacyScreenImage', verbose_name='Chosen Privacy Screen Image'),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='session_lock',
            field=models.BooleanField(default=False, help_text='When True, patient must validate session to gain access to endpoints requiring recent heartbeat.', verbose_name='Session Lock'),
        ),
        migrations.AddField(
            model_name='historicalencounter',
            name='session_validation_attempts',
            field=models.PositiveSmallIntegerField(default=0, help_text='Number of times that session-validate has been called without success up to 6.  After 6 attempts, all further attempts are failed automatically without recording.', verbose_name='Session Validation Attempts'),
        ),
        migrations.AddField(
            model_name='jasprsession',
            name='encounter',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='kiosk.Encounter', verbose_name='Encounter'),
        ),
        migrations.AlterField(
            model_name='action',
            name='section_uid',
            field=models.CharField(blank=True, max_length=63, verbose_name='Section UID'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kiosk.Patient', verbose_name='Patient'),
        ),
        migrations.AlterField(
            model_name='historicaltechnician',
            name='primary_department',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='clinics.Department', verbose_name='Primary Department'),
        ),
        migrations.AlterField(
            model_name='patientcopingstrategy',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='kiosk_patientcopingstrategy_coping_strategy_category', to='kiosk.CopingStrategyCategory'),
        ),
        migrations.AlterField(
            model_name='technician',
            name='primary_department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='clinics.Department', verbose_name='Primary Department'),
        ),
        migrations.AddField(
            model_name='srat',
            name='patient_session',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='patientsession',
            name='encounter',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='kiosk.Encounter', verbose_name='Encounter'),
        ),
        migrations.AddField(
            model_name='patientmeasurements',
            name='patient_session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='historicalsrat',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalsrat',
            name='patient_session',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='historicalpatientsession',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='kiosk.Encounter', verbose_name='Encounter'),
        ),
        migrations.AddField(
            model_name='historicalpatientsession',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalcustomonboardingquestions',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalcustomonboardingquestions',
            name='patient_session',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='historicalcrisisstabilityplan',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalcrisisstabilityplan',
            name='patient_session',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='customonboardingquestions',
            name='patient_session',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='crisisstabilityplan',
            name='patient_session',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='action',
            name='patient_session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='amendment',
            name='patient_session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='historicalamendment',
            name='patient_session',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='historicalpatientcopingstrategy',
            name='patient_session',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='patientcopingstrategy',
            name='patient_session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='kiosk.PatientSession', verbose_name='Patient Session'),
        ),
        migrations.AddField(
            model_name='activaterecord',
            name='encounter',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='kiosk.Encounter',
                                    verbose_name='Encounter'),
        ),
        migrations.AddConstraint(
            model_name='patientcopingstrategy',
            constraint=models.UniqueConstraint(fields=('title', 'patient_session'),
                                               name='patientcopingstrategy_title_and_patient_session_unique_together'),
        ),
    ]
