# Generated by Django 2.2.13 on 2020-06-19 21:32

import colorful.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import fernet_fields.fields
import jaspr.apps.common.fields.encrypted_array_field
import jaspr.apps.common.fields.encrypted_boolean_field
import jaspr.apps.common.fields.encrypted_positive_small_integer_field
import model_utils.fields
import phonenumber_field.modelfields
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("clinics", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("awsmedia", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Action",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("in_er", models.BooleanField(verbose_name="In Emergency Room?")),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("Arrive", "Time of arriving @ CAMS section"),
                            (
                                "CarePlanningReportClosed",
                                "Time user closes Planning Report.",
                            ),
                            (
                                "CarePlanningReportOpen",
                                "Time user opens Planning Report.",
                            ),
                            (
                                "Explore",
                                "Time of selecting Explore on my own button after tutorial",
                            ),
                            (
                                "Guide",
                                "Time of selecting Continue Guidance button after tutorial",
                            ),
                            ("GuideJasper", "Time of selecting Jasper as the guide."),
                            ("GuideJaz", "Time of selecting Jaz as the guide."),
                            (
                                "HamburgerCAMS",
                                "Time of selecting CAMS button on hamburger menu",
                            ),
                            (
                                "HamburgerCS",
                                "Time of selecting comfort and skills button on hamburger menu",
                            ),
                            (
                                "HamburgerHome",
                                "Time of selecting Home button on hamburger menu",
                            ),
                            (
                                "HamburgerMyAccount",
                                "Time of selecting My Account button on hamburger menu",
                            ),
                            (
                                "HamburgerSS",
                                "Time of selecting Shared Stories button on hamburger menu",
                            ),
                            (
                                "HamburgerTK",
                                "Time of selecting Takeaway Kit button on hamburger menu",
                            ),
                            (
                                "HamburgerStabilityPlan",
                                "Time of selecting Stability Plan button on hamburger menu",
                            ),
                            (
                                "HamburgerContacts",
                                "Time of selecting Contacts button on hamburger menu",
                            ),
                            (
                                "InterviewSummaryClosed",
                                "Time user closes Interview Summary.",
                            ),
                            (
                                "InterviewSummaryOpen",
                                "Time user opens Interview Summary.",
                            ),
                            ("Lockout", "Time of lockout (10 min inactivity)"),
                            ("LogOutByUser", "Time of logout initiated by user"),
                            ("LogOutTimeout", "Time of logout (60 min inactivity)"),
                            ("MenuCAMS", "Time of selecting CAMS button on side menu"),
                            (
                                "MenuCS",
                                "Time of selecting comfort and skills button on side menu",
                            ),
                            ("MenuHome", "Time of selecting Home button on side menu"),
                            (
                                "MenuSS",
                                "Time of selecting Shared Stories button on side menu",
                            ),
                            (
                                "MenuTK",
                                "Time of selecting Takeaway Kit button on side menu",
                            ),
                            ("SessionStart", "Time of log in initiated by technician"),
                            ("SkipWTE", "Time of pressing 'Skip' before WTE video"),
                            ("Submit", "Time of submitting CAMS section"),
                            ("StabilityPlanClosed", "Time user closes Stability Plan."),
                            ("StabilityPlanOpen", "Time user opens Stability Plan."),
                            ("SummariesClosed", "Time user closes Summaries drawer."),
                            ("SummariesOpen", "Time user opens Summaries drawer."),
                            (
                                "Watch",
                                "Time user finishes (~95% progress at the time of writing) watching a video.",
                            ),
                            (
                                "JAHWalkthroughStart",
                                "Time user clicks to start the Walkthrough.",
                            ),
                            (
                                "JAHWalkthroughArrive",
                                "Time user arrives at specific content in the Walkthrough.",
                            ),
                            (
                                "JAHWalkthroughClickedMoreInfo",
                                "Time user clicks more info on a page of the Walkthrough.",
                            ),
                            (
                                "JAHWalkthroughArriveRecap",
                                "Time user gets to the list of their steps at the end of the Walkthrough and can choose to go back.",
                            ),
                            ("JAHWalkthroughEnd", "Time user leaves the Walkthrough."),
                            (
                                "JAHArriveContacts",
                                "Time user goes to their supportive people page.",
                            ),
                            (
                                "JAHArrivePeople",
                                "Time user clicks into page with their supportive people contacts.",
                            ),
                            (
                                "JAHArriveSupportivePerson",
                                "Time user clicks into a specific supportive person from either the home page or the contacts page.",
                            ),
                            (
                                "JAHArriveCrisisLine",
                                "Time user goes to specific crisis line page.",
                            ),
                            (
                                "JAHArrivePeopleMore",
                                'Time user clicks into "more about supportive people".',
                            ),
                            (
                                "JAHArriveConvoStarters",
                                'Time user clicks into "Conversation Starters".',
                            ),
                            (
                                "JAHUserCopy",
                                "Time user copies a starter, with the order number of the starter they copied specified.",
                            ),
                            (
                                "JAHArriveCommonConcerns",
                                'Time user clicks into "Common Concerns".',
                            ),
                            (
                                "JAHOpenConcern",
                                "Time user opens up a common concern, with the order number of the concern they opened specified.",
                            ),
                            (
                                "JAHArriveSSSupportivePeople",
                                "Time user clicks into Shared Stories: Supportive People.",
                            ),
                            (
                                "JAHArriveSSHotlines",
                                "Time user clicks into Shared Stories: Hotlines.",
                            ),
                            (
                                "JAHCallHotline",
                                "Time user clicks button to call the hotline (accessible from multiple screens).",
                            ),
                            (
                                "JAHTextHotline",
                                "Time user clicks button to text hotline (accessible from multiple screens).",
                            ),
                            (
                                "JAHCallSupportivePerson",
                                "Time user clicks button to call a supportive person (accessible from multiple screens).",
                            ),
                            (
                                "JAHTextSupportivePerson",
                                "Time user clicks button to text a supportive person (accessible from multiple screens).",
                            ),
                        ],
                        max_length=63,
                        verbose_name="Action",
                    ),
                ),
                (
                    "screen",
                    models.CharField(
                        blank=True,
                        help_text="(If relevant) What screen was the user on when the action was taken?",
                        max_length=63,
                        verbose_name="Screen",
                    ),
                ),
                (
                    "extra",
                    models.CharField(
                        blank=True,
                        help_text="Some analytics provide extra information. This is where that extra information gets stored. If it's more than 127 characters, it gets trimmed down to 127 characters.",
                        max_length=127,
                        verbose_name="Extra",
                    ),
                ),
                (
                    "section_uid",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("welcome", "welcome"),
                            ("rate_distress", "rate_distress"),
                            ("rate_frustration", "rate_frustration"),
                            ("tutorial_video", "tutorial_video"),
                            ("set_security_image", "set_security_image"),
                            ("set_security_question", "set_security_question"),
                            ("walk_through_video", "walk_through_video"),
                            ("explore", "explore"),
                            ("start", "start"),
                            ("drivers", "drivers"),
                            ("rate_psych", "rate_psych"),
                            ("rate_psych_text", "rate_psych_text"),
                            ("rate_stress", "rate_stress"),
                            ("rate_stress_text", "rate_stress_text"),
                            ("rate_agitation", "rate_agitation"),
                            ("rate_agitation_text", "rate_agitation_text"),
                            ("rate_hopeless", "rate_hopeless"),
                            ("rate_hopeless_text", "rate_hopeless_text"),
                            ("rate_self_hate", "rate_self_hate"),
                            ("rate_self_hate_text", "rate_self_hate_text"),
                            ("rank_feelings", "rank_feelings"),
                            ("suicide_risk", "suicide_risk"),
                            ("suicidal_about_yourself", "suicidal_about_yourself"),
                            ("suicidal_about_others", "suicidal_about_others"),
                            ("reasons_live_die", "reasons_live_die"),
                            ("rank_reasons_live", "rank_reasons_live"),
                            ("rank_reasons_die", "rank_reasons_die"),
                            ("wish_live", "wish_live"),
                            ("wish_die", "wish_die"),
                            ("one_thing", "one_thing"),
                            ("ssf_a_review", "ssf_a_review"),
                            ("suicidal_describe", "suicidal_describe"),
                            ("suicidal_freq", "suicidal_freq"),
                            ("suicidal_length", "suicidal_length"),
                            ("worse_describe", "worse_describe"),
                            ("plans_describe", "plans_describe"),
                            ("means_describe", "means_describe"),
                            ("firearm_describe", "firearm_describe"),
                            ("steps_describe", "steps_describe"),
                            ("practiced_describe", "practiced_describe"),
                            ("intent_describe", "intent_describe"),
                            ("current_describe", "current_describe"),
                            ("times_tried_describe", "times_tried_describe"),
                            ("nssi_describe", "nssi_describe"),
                            ("hospitalized_describe", "hospitalized_describe"),
                            ("impulsive_describe", "impulsive_describe"),
                            ("abuse_describe", "abuse_describe"),
                            ("losses_describe", "losses_describe"),
                            ("relationship_describe", "relationship_describe"),
                            ("burden_describe", "burden_describe"),
                            ("health_describe", "health_describe"),
                            ("sleep_describe", "sleep_describe"),
                            ("legal_describe", "legal_describe"),
                            ("shame_describe", "shame_describe"),
                            ("ssfa_finish", "ssfa_finish"),
                            ("make_home_start", "make_home_start"),
                            ("surviving_makes_sense", "surviving_makes_sense"),
                            ("i_can_help", "i_can_help"),
                            ("desire_to_harm", "desire_to_harm"),
                            ("skip_lethal_means", "skip_lethal_means"),
                            ("skip_reason", "skip_reason"),
                            ("reason_too_tired", "reason_too_tired"),
                            ("reason_too_private", "reason_too_private"),
                            (
                                "reason_people_will_overreact",
                                "reason_people_will_overreact",
                            ),
                            (
                                "reason_people_will_overreact_take_away_means",
                                "reason_people_will_overreact_take_away_means",
                            ),
                            (
                                "reason_people_will_overreact_take_away_means_skip",
                                "reason_people_will_overreact_take_away_means_skip",
                            ),
                            (
                                "reason_people_will_overreact_keep_against_will",
                                "reason_people_will_overreact_keep_against_will",
                            ),
                            (
                                "reason_people_will_overreact_keep_against_will_skip",
                                "reason_people_will_overreact_keep_against_will_skip",
                            ),
                            ("reason_dont_want_to_talk", "reason_dont_want_to_talk"),
                            (
                                "reason_dont_want_to_talk_all",
                                "reason_dont_want_to_talk_all",
                            ),
                            (
                                "reason_dont_want_to_talk_all_skip",
                                "reason_dont_want_to_talk_all_skip",
                            ),
                            ("lethal_means_too_shameful", "lethal_means_too_shameful"),
                            ("lethal_means_dont_need", "lethal_means_dont_need"),
                            ("lethal_means_get_rid", "lethal_means_get_rid"),
                            ("lethal_means_not_stable", "lethal_means_not_stable"),
                            ("lethal_means_want_to_keep", "lethal_means_want_to_keep"),
                            (
                                "lethal_means_afraid_hospital",
                                "lethal_means_afraid_hospital",
                            ),
                            (
                                "lethal_means_too_depressed",
                                "lethal_means_too_depressed",
                            ),
                            ("means_describe_review", "means_describe_review"),
                            ("consider_reducing_access", "consider_reducing_access"),
                            ("strategies_general", "strategies_general"),
                            ("additional_strategies", "additional_strategies"),
                            ("means_custom", "means_custom"),
                            ("means_support", "means_support"),
                            ("means_willing", "means_willing"),
                            ("thank_you_means", "thank_you_means"),
                            ("crisis_desc", "crisis_desc"),
                            ("get_help", "get_help"),
                            ("ok_ready", "ok_ready"),
                            ("comfort_and_skills", "comfort_and_skills"),
                            ("shared_stories", "shared_stories"),
                            ("view_card1", "view_card1"),
                            ("when_things_get_hard", "when_things_get_hard"),
                            ("coping_body", "coping_body"),
                            ("coping_distract", "coping_distract"),
                            ("coping_help_others", "coping_help_others"),
                            ("coping_courage", "coping_courage"),
                            ("coping_senses", "coping_senses"),
                            ("supportive_people", "supportive_people"),
                            ("coping_top", "coping_top"),
                            ("view_card2", "view_card2"),
                            ("reasons_live_edit", "reasons_live_edit"),
                            ("view_card3", "view_card3"),
                            ("warning_stressors", "warning_stressors"),
                            ("warning_thoughts", "warning_thoughts"),
                            ("warning_feelings", "warning_feelings"),
                            ("warning_actions", "warning_actions"),
                            ("ws_top", "ws_top"),
                            ("view_card4", "view_card4"),
                            ("stability_rehearsal", "stability_rehearsal"),
                            ("stability_confidence", "stability_confidence"),
                            ("talk_it_through", "talk_it_through"),
                            ("readiness", "readiness"),
                            ("readiness_no", "readiness_no"),
                            ("readiness_yes_reasons", "readiness_yes_reasons"),
                            ("readiness_yes_changed", "readiness_yes_changed"),
                            ("thanks_plan_to_cope", "thanks_plan_to_cope"),
                            ("walk_through", "walk_through"),
                            ("rate_distress1", "rate_distress1"),
                            ("rate_frustration1", "rate_frustration1"),
                            ("checkin_thank_you", "checkin_thank_you"),
                            ("will_check_in", "will_check_in"),
                            ("take_care", "take_care"),
                        ],
                        max_length=63,
                        verbose_name="Section UID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="The time the action was submitted to the backend.",
                        verbose_name="Timestamp",
                    ),
                ),
                (
                    "client_timestamp",
                    models.DateTimeField(
                        blank=True,
                        help_text="The time the client (web browser) said the action occurred at.",
                        null=True,
                        verbose_name="Client Timestamp",
                    ),
                ),
            ],
            options={"verbose_name": "Action", "verbose_name_plural": "Actions",},
        ),
        migrations.CreateModel(
            name="ActivateRecord",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="Timestamp",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="Modified",
                    ),
                ),
            ],
            options={
                "verbose_name": "Activate Record",
                "verbose_name_plural": "Activate Records",
            },
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
                (
                    "main_page_image",
                    models.ImageField(
                        blank=True,
                        help_text="High resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="Main Page Image",
                    ),
                ),
                (
                    "thumbnail_image",
                    models.ImageField(
                        blank=True,
                        help_text="High resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="Thumbnail Image",
                    ),
                ),
                (
                    "target_url",
                    models.CharField(
                        blank=True,
                        help_text="This is a relative URL.",
                        max_length=150,
                        verbose_name="Target URL",
                    ),
                ),
                (
                    "label_color",
                    colorful.fields.RGBColorField(
                        blank=True, verbose_name="Label Color"
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(default=0, verbose_name="Order"),
                ),
            ],
            options={"verbose_name": "Activity", "verbose_name_plural": "Activities",},
        ),
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "current_section_uid",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("welcome", "welcome"),
                            ("rate_distress", "rate_distress"),
                            ("rate_frustration", "rate_frustration"),
                            ("tutorial_video", "tutorial_video"),
                            ("set_security_image", "set_security_image"),
                            ("set_security_question", "set_security_question"),
                            ("walk_through_video", "walk_through_video"),
                            ("explore", "explore"),
                            ("start", "start"),
                            ("drivers", "drivers"),
                            ("rate_psych", "rate_psych"),
                            ("rate_psych_text", "rate_psych_text"),
                            ("rate_stress", "rate_stress"),
                            ("rate_stress_text", "rate_stress_text"),
                            ("rate_agitation", "rate_agitation"),
                            ("rate_agitation_text", "rate_agitation_text"),
                            ("rate_hopeless", "rate_hopeless"),
                            ("rate_hopeless_text", "rate_hopeless_text"),
                            ("rate_self_hate", "rate_self_hate"),
                            ("rate_self_hate_text", "rate_self_hate_text"),
                            ("rank_feelings", "rank_feelings"),
                            ("suicide_risk", "suicide_risk"),
                            ("suicidal_about_yourself", "suicidal_about_yourself"),
                            ("suicidal_about_others", "suicidal_about_others"),
                            ("reasons_live_die", "reasons_live_die"),
                            ("rank_reasons_live", "rank_reasons_live"),
                            ("rank_reasons_die", "rank_reasons_die"),
                            ("wish_live", "wish_live"),
                            ("wish_die", "wish_die"),
                            ("one_thing", "one_thing"),
                            ("ssf_a_review", "ssf_a_review"),
                            ("suicidal_describe", "suicidal_describe"),
                            ("suicidal_freq", "suicidal_freq"),
                            ("suicidal_length", "suicidal_length"),
                            ("worse_describe", "worse_describe"),
                            ("plans_describe", "plans_describe"),
                            ("means_describe", "means_describe"),
                            ("firearm_describe", "firearm_describe"),
                            ("steps_describe", "steps_describe"),
                            ("practiced_describe", "practiced_describe"),
                            ("intent_describe", "intent_describe"),
                            ("current_describe", "current_describe"),
                            ("times_tried_describe", "times_tried_describe"),
                            ("nssi_describe", "nssi_describe"),
                            ("hospitalized_describe", "hospitalized_describe"),
                            ("impulsive_describe", "impulsive_describe"),
                            ("abuse_describe", "abuse_describe"),
                            ("losses_describe", "losses_describe"),
                            ("relationship_describe", "relationship_describe"),
                            ("burden_describe", "burden_describe"),
                            ("health_describe", "health_describe"),
                            ("sleep_describe", "sleep_describe"),
                            ("legal_describe", "legal_describe"),
                            ("shame_describe", "shame_describe"),
                            ("ssfa_finish", "ssfa_finish"),
                            ("make_home_start", "make_home_start"),
                            ("surviving_makes_sense", "surviving_makes_sense"),
                            ("i_can_help", "i_can_help"),
                            ("desire_to_harm", "desire_to_harm"),
                            ("skip_lethal_means", "skip_lethal_means"),
                            ("skip_reason", "skip_reason"),
                            ("reason_too_tired", "reason_too_tired"),
                            ("reason_too_private", "reason_too_private"),
                            (
                                "reason_people_will_overreact",
                                "reason_people_will_overreact",
                            ),
                            (
                                "reason_people_will_overreact_take_away_means",
                                "reason_people_will_overreact_take_away_means",
                            ),
                            (
                                "reason_people_will_overreact_take_away_means_skip",
                                "reason_people_will_overreact_take_away_means_skip",
                            ),
                            (
                                "reason_people_will_overreact_keep_against_will",
                                "reason_people_will_overreact_keep_against_will",
                            ),
                            (
                                "reason_people_will_overreact_keep_against_will_skip",
                                "reason_people_will_overreact_keep_against_will_skip",
                            ),
                            ("reason_dont_want_to_talk", "reason_dont_want_to_talk"),
                            (
                                "reason_dont_want_to_talk_all",
                                "reason_dont_want_to_talk_all",
                            ),
                            (
                                "reason_dont_want_to_talk_all_skip",
                                "reason_dont_want_to_talk_all_skip",
                            ),
                            ("lethal_means_too_shameful", "lethal_means_too_shameful"),
                            ("lethal_means_dont_need", "lethal_means_dont_need"),
                            ("lethal_means_get_rid", "lethal_means_get_rid"),
                            ("lethal_means_not_stable", "lethal_means_not_stable"),
                            ("lethal_means_want_to_keep", "lethal_means_want_to_keep"),
                            (
                                "lethal_means_afraid_hospital",
                                "lethal_means_afraid_hospital",
                            ),
                            (
                                "lethal_means_too_depressed",
                                "lethal_means_too_depressed",
                            ),
                            ("means_describe_review", "means_describe_review"),
                            ("consider_reducing_access", "consider_reducing_access"),
                            ("strategies_general", "strategies_general"),
                            ("additional_strategies", "additional_strategies"),
                            ("means_custom", "means_custom"),
                            ("means_support", "means_support"),
                            ("means_willing", "means_willing"),
                            ("thank_you_means", "thank_you_means"),
                            ("crisis_desc", "crisis_desc"),
                            ("get_help", "get_help"),
                            ("ok_ready", "ok_ready"),
                            ("comfort_and_skills", "comfort_and_skills"),
                            ("shared_stories", "shared_stories"),
                            ("view_card1", "view_card1"),
                            ("when_things_get_hard", "when_things_get_hard"),
                            ("coping_body", "coping_body"),
                            ("coping_distract", "coping_distract"),
                            ("coping_help_others", "coping_help_others"),
                            ("coping_courage", "coping_courage"),
                            ("coping_senses", "coping_senses"),
                            ("supportive_people", "supportive_people"),
                            ("coping_top", "coping_top"),
                            ("view_card2", "view_card2"),
                            ("reasons_live_edit", "reasons_live_edit"),
                            ("view_card3", "view_card3"),
                            ("warning_stressors", "warning_stressors"),
                            ("warning_thoughts", "warning_thoughts"),
                            ("warning_feelings", "warning_feelings"),
                            ("warning_actions", "warning_actions"),
                            ("ws_top", "ws_top"),
                            ("view_card4", "view_card4"),
                            ("stability_rehearsal", "stability_rehearsal"),
                            ("stability_confidence", "stability_confidence"),
                            ("talk_it_through", "talk_it_through"),
                            ("readiness", "readiness"),
                            ("readiness_no", "readiness_no"),
                            ("readiness_yes_reasons", "readiness_yes_reasons"),
                            ("readiness_yes_changed", "readiness_yes_changed"),
                            ("thanks_plan_to_cope", "thanks_plan_to_cope"),
                            ("walk_through", "walk_through"),
                            ("rate_distress1", "rate_distress1"),
                            ("rate_frustration1", "rate_frustration1"),
                            ("checkin_thank_you", "checkin_thank_you"),
                            ("will_check_in", "will_check_in"),
                            ("take_care", "take_care"),
                        ],
                        max_length=63,
                        null=True,
                        verbose_name="Current Section UID",
                    ),
                ),
                (
                    "rate_psych",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "most_painful",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rate_stress",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "most_stress",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rate_agitation",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "causes_agitation",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rate_hopeless",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "most_hopeless",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rate_self_hate",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "most_hate",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rank_feelings",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=9, null=True
                    ),
                ),
                (
                    "suicide_risk",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "suicidal_yourself",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "suicidal_others",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "reasons_live",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000), null=True, size=5
                    ),
                ),
                (
                    "reasons_die",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000), null=True, size=5
                    ),
                ),
                (
                    "wish_live",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(8),
                        ],
                    ),
                ),
                (
                    "wish_die",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(8),
                        ],
                    ),
                ),
                (
                    "one_thing",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "suicidal_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "suicidal_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "suicidal_freq",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True, null=True
                    ),
                ),
                (
                    "suicidal_freq_units",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[("day", "Day"), ("week", "Week"), ("month", "Month")],
                        max_length=7,
                        null=True,
                    ),
                ),
                (
                    "length_suicidal_thought",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10, null=True
                    ),
                ),
                (
                    "worse_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "worse_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "plan_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "plan_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "means_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "means_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "firearms_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "firearms_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "steps_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "steps_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "practiced_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "practiced_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "intent_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "intent_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "current_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "current_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "times_tried",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("once", "Single Attempt"),
                            ("many", "Multiple Attempts (2 or more)"),
                        ],
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "times_tried_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "nssi_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "nssi_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "hospitalized_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "hospitalized_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "impulsive_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "impulsive_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "abuse_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "abuse_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "losses_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "losses_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "relationship_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "relationship_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "burden_on_others_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "burden_on_others_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "health_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "health_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "sleep_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "sleep_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "legal_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "legal_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "shame_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "shame_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "skip_lethal_means",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "skip_reason",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Too tired", "Too tired"),
                            ("Too private", "Too private"),
                            (
                                "I'm worried people will overreact",
                                "I'm worried people will overreact",
                            ),
                            (
                                "I'm not sure I want to talk about it",
                                "I'm not sure I want to talk about it",
                            ),
                            ("It's too shameful", "It's too shameful"),
                            ("I don't need to do this", "I don't need to do this"),
                            ("Cannot get rid of means", "Cannot get rid of means"),
                            (
                                "Not sure I want to be stable",
                                "Not sure I want to be stable",
                            ),
                            ("I want to keep my means", "I want to keep my means"),
                            (
                                "I'm afraid this will keep me in the hospital",
                                "I'm afraid this will keep me in the hospital",
                            ),
                            (
                                "I feel too depressed or overwhelmed",
                                "I feel too depressed or overwhelmed",
                            ),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "too_private_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "overreact_specific",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Take away means", "Take away means"),
                            (
                                "Keep me in hospital against my will",
                                "Keep me in hospital against my will",
                            ),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "overreact_take_away_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "overreact_keep_me_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "reason_not_sure_talk",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            (
                                "I'll be forced to do something I don't want to do",
                                "I'll be forced to do something I don't want to do",
                            ),
                            (
                                "I'm undecided if I want to kill myself",
                                "I'm undecided if I want to kill myself",
                            ),
                            (
                                "I want to kill myself and don't want to be blocked",
                                "I want to kill myself and don't want to be blocked",
                            ),
                            (
                                "I don't want my answers about this recorded",
                                "I don't want my answers about this recorded",
                            ),
                            (
                                "I'm mixed about reducing access",
                                "I'm mixed about reducing access",
                            ),
                            (
                                "Having access is comforting - I have a way out",
                                "Having access is comforting - I have a way out",
                            ),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "not_sure_talk_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "too_shameful_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "do_not_need_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "cannot_rid_means_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "stable_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "keep_means_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "keep_in_hospital_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "feel_depressed_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "strategies_general",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_firearm",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_medicine",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_places",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_other",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_custom",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "means_support_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "means_support_who",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "means_willing",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("Very willing", "Very willing"),
                            ("Mixed/Unsure", "Mixed/Unsure"),
                            ("Not willing", "Not willing"),
                        ],
                        max_length=31,
                        null=True,
                    ),
                ),
                (
                    "crisis_desc",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "coping_body",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_distract",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_help_others",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_courage",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_senses",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "supportive_people",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=django.contrib.postgres.fields.jsonb.JSONField(),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_top",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_stressors",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_thoughts",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_feelings",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_actions",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_top",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "stability_rehearsal",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "stability_confidence",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "willing_to_talk",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("Yes, I'm good with that", "Yes, I'm good with that"),
                            ("No, just provider", "No, just provider"),
                        ],
                        max_length=127,
                        null=True,
                    ),
                ),
                (
                    "readiness",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("Not at all ready", "Not at all ready"),
                            ("Somewhat ready", "Somewhat ready"),
                            ("Very ready", "Very ready"),
                        ],
                        max_length=127,
                        null=True,
                    ),
                ),
                (
                    "readiness_no",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "readiness_yes_reasons",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(
                            choices=[
                                (
                                    "I need to take care of my obligations",
                                    "I need to take care of my obligations",
                                ),
                                (
                                    "I feel better and calmer",
                                    "I feel better and calmer",
                                ),
                                ("I feel ready to cope", "I feel ready to cope"),
                                ("My urge has gone down", "My urge has gone down"),
                                (
                                    "This was a misunderstanding",
                                    "This was a misunderstanding",
                                ),
                                ("I'm frustrated", "I'm frustrated"),
                                (
                                    "People who support me understand how serious I am",
                                    "People who support me understand how serious I am",
                                ),
                                (
                                    "My circumstances have changed",
                                    "My circumstances have changed",
                                ),
                            ],
                            max_length=127,
                            null=True,
                        ),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "readiness_yes_changed",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "walk_through",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[("Got it", "Got it"), ("Sounds good", "Sounds good")],
                        max_length=31,
                        null=True,
                    ),
                ),
                (
                    "will_check_in",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Got it", "Got it"),
                            ("Okay, talk to you later", "Okay, talk to you later"),
                        ],
                        max_length=31,
                        null=True,
                    ),
                ),
                (
                    "time_here",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("Just got here", "Just got here"),
                            (
                                "At least a few hours, less than 24 hours",
                                "At least a few hours, less than 24 hours",
                            ),
                            ("More than 24 hours", "More than 24 hours"),
                        ],
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    "distress0",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "frustration0",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "check_in_time0",
                    fernet_fields.fields.EncryptedDateTimeField(null=True),
                ),
                (
                    "distress1",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "frustration1",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "check_in_time1",
                    fernet_fields.fields.EncryptedDateTimeField(null=True),
                ),
                (
                    "distress2",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "frustration2",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "check_in_time2",
                    fernet_fields.fields.EncryptedDateTimeField(null=True),
                ),
                (
                    "readiness_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "readiness_changed",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "reason_live1",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_live2",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_live3",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_live4",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_live5",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die1",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die2",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die3",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die4",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die5",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "rank_reason_live",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=9, null=True
                    ),
                ),
                (
                    "rank_reason_die",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=9, null=True
                    ),
                ),
                (
                    "history_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        editable=False, null=True
                    ),
                ),
                (
                    "history_yes_no_describe",
                    fernet_fields.fields.EncryptedTextField(
                        blank=True, editable=False, null=True
                    ),
                ),
                (
                    "manual_coping",
                    fernet_fields.fields.EncryptedTextField(
                        blank=True, editable=False, null=True
                    ),
                ),
                (
                    "ws_sensations",
                    fernet_fields.fields.EncryptedTextField(
                        blank=True, editable=False, null=True
                    ),
                ),
                (
                    "ws_emotions",
                    fernet_fields.fields.EncryptedTextField(
                        blank=True, editable=False, null=True
                    ),
                ),
                (
                    "readiness1_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        editable=False, null=True
                    ),
                ),
                (
                    "readiness1_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=250, null=True
                    ),
                ),
                (
                    "readiness1_yes_no_choice",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            (
                                "I have obligations I need to take care of",
                                "I have obligations I need to take care of",
                            ),
                            ("I feel better and calmer", "I feel better and calmer"),
                            ("I feel ready to cope", "I feel ready to cope"),
                            (
                                "I'm thinking more clearly now",
                                "I'm thinking more clearly now",
                            ),
                            ("My urge has gone down", "My urge has gone down"),
                            (
                                "This was a misunderstanding",
                                "This was a misunderstanding",
                            ),
                            ("I'm frustrated", "I'm frustrated"),
                            (
                                "I've had insights/awareness I didn't have before I came in",
                                "I've had insights/awareness I didn't have before I came in",
                            ),
                            (
                                "People who support me understand how serious I am",
                                "People who support me understand how serious I am",
                            ),
                            (
                                "My circumstances have changed",
                                "My circumstances have changed",
                            ),
                        ],
                        editable=False,
                        max_length=127,
                        null=True,
                    ),
                ),
                (
                    "readiness2_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        editable=False, null=True
                    ),
                ),
                (
                    "readiness2_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=250, null=True
                    ),
                ),
                (
                    "readiness2_yes_no_choice",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            (
                                "I have obligations I need to take care of",
                                "I have obligations I need to take care of",
                            ),
                            ("I feel better and calmer", "I feel better and calmer"),
                            ("I feel ready to cope", "I feel ready to cope"),
                            (
                                "I'm thinking more clearly now",
                                "I'm thinking more clearly now",
                            ),
                            ("My urge has gone down", "My urge has gone down"),
                            (
                                "This was a misunderstanding",
                                "This was a misunderstanding",
                            ),
                            ("I'm frustrated", "I'm frustrated"),
                            (
                                "I've had insights/awareness I didn't have before I came in",
                                "I've had insights/awareness I didn't have before I came in",
                            ),
                            (
                                "People who support me understand how serious I am",
                                "People who support me understand how serious I am",
                            ),
                            (
                                "My circumstances have changed",
                                "My circumstances have changed",
                            ),
                        ],
                        editable=False,
                        max_length=127,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Assessment",
                "verbose_name_plural": "Assessments",
            },
        ),
        migrations.CreateModel(
            name="CopingStrategy",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Administrative name.", max_length=100, unique=True
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Public title of this coping strategy, currently used to connect frontend to backend as a key.",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("image", models.ImageField(upload_to="")),
            ],
            options={
                "verbose_name": "Coping Strategy",
                "verbose_name_plural": "Coping Strategies",
                "ordering": ("title",),
            },
        ),
        migrations.CreateModel(
            name="CopingStrategyCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.CharField(max_length=100, unique=True)),
                (
                    "why_text",
                    models.TextField(
                        blank=True,
                        help_text="Text that will appear after clicking 'The why behind this'",
                    ),
                ),
            ],
            options={
                "verbose_name": "Coping Strategy Category",
                "verbose_name_plural": "Coping Strategy Categories",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="GuideMessage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Administrative name.", max_length=100, unique=True
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        help_text="Text that will appear after clicking 'The why behind this'",
                    ),
                ),
            ],
            options={
                "verbose_name": "Guide Message",
                "verbose_name_plural": "Guide Messages",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Helpline",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None
                    ),
                ),
                ("text", models.CharField(max_length=25)),
            ],
            options={"verbose_name": "Helpline", "verbose_name_plural": "Helplines",},
        ),
        migrations.CreateModel(
            name="HistoricalActivity",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=150)),
                (
                    "main_page_image",
                    models.TextField(
                        blank=True,
                        help_text="High resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        null=True,
                        verbose_name="Main Page Image",
                    ),
                ),
                (
                    "thumbnail_image",
                    models.TextField(
                        blank=True,
                        help_text="High resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        null=True,
                        verbose_name="Thumbnail Image",
                    ),
                ),
                (
                    "target_url",
                    models.CharField(
                        blank=True,
                        help_text="This is a relative URL.",
                        max_length=150,
                        verbose_name="Target URL",
                    ),
                ),
                (
                    "label_color",
                    colorful.fields.RGBColorField(
                        blank=True, verbose_name="Label Color"
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(default=0, verbose_name="Order"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Activity",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalAssessment",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "current_section_uid",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("welcome", "welcome"),
                            ("rate_distress", "rate_distress"),
                            ("rate_frustration", "rate_frustration"),
                            ("tutorial_video", "tutorial_video"),
                            ("set_security_image", "set_security_image"),
                            ("set_security_question", "set_security_question"),
                            ("walk_through_video", "walk_through_video"),
                            ("explore", "explore"),
                            ("start", "start"),
                            ("drivers", "drivers"),
                            ("rate_psych", "rate_psych"),
                            ("rate_psych_text", "rate_psych_text"),
                            ("rate_stress", "rate_stress"),
                            ("rate_stress_text", "rate_stress_text"),
                            ("rate_agitation", "rate_agitation"),
                            ("rate_agitation_text", "rate_agitation_text"),
                            ("rate_hopeless", "rate_hopeless"),
                            ("rate_hopeless_text", "rate_hopeless_text"),
                            ("rate_self_hate", "rate_self_hate"),
                            ("rate_self_hate_text", "rate_self_hate_text"),
                            ("rank_feelings", "rank_feelings"),
                            ("suicide_risk", "suicide_risk"),
                            ("suicidal_about_yourself", "suicidal_about_yourself"),
                            ("suicidal_about_others", "suicidal_about_others"),
                            ("reasons_live_die", "reasons_live_die"),
                            ("rank_reasons_live", "rank_reasons_live"),
                            ("rank_reasons_die", "rank_reasons_die"),
                            ("wish_live", "wish_live"),
                            ("wish_die", "wish_die"),
                            ("one_thing", "one_thing"),
                            ("ssf_a_review", "ssf_a_review"),
                            ("suicidal_describe", "suicidal_describe"),
                            ("suicidal_freq", "suicidal_freq"),
                            ("suicidal_length", "suicidal_length"),
                            ("worse_describe", "worse_describe"),
                            ("plans_describe", "plans_describe"),
                            ("means_describe", "means_describe"),
                            ("firearm_describe", "firearm_describe"),
                            ("steps_describe", "steps_describe"),
                            ("practiced_describe", "practiced_describe"),
                            ("intent_describe", "intent_describe"),
                            ("current_describe", "current_describe"),
                            ("times_tried_describe", "times_tried_describe"),
                            ("nssi_describe", "nssi_describe"),
                            ("hospitalized_describe", "hospitalized_describe"),
                            ("impulsive_describe", "impulsive_describe"),
                            ("abuse_describe", "abuse_describe"),
                            ("losses_describe", "losses_describe"),
                            ("relationship_describe", "relationship_describe"),
                            ("burden_describe", "burden_describe"),
                            ("health_describe", "health_describe"),
                            ("sleep_describe", "sleep_describe"),
                            ("legal_describe", "legal_describe"),
                            ("shame_describe", "shame_describe"),
                            ("ssfa_finish", "ssfa_finish"),
                            ("make_home_start", "make_home_start"),
                            ("surviving_makes_sense", "surviving_makes_sense"),
                            ("i_can_help", "i_can_help"),
                            ("desire_to_harm", "desire_to_harm"),
                            ("skip_lethal_means", "skip_lethal_means"),
                            ("skip_reason", "skip_reason"),
                            ("reason_too_tired", "reason_too_tired"),
                            ("reason_too_private", "reason_too_private"),
                            (
                                "reason_people_will_overreact",
                                "reason_people_will_overreact",
                            ),
                            (
                                "reason_people_will_overreact_take_away_means",
                                "reason_people_will_overreact_take_away_means",
                            ),
                            (
                                "reason_people_will_overreact_take_away_means_skip",
                                "reason_people_will_overreact_take_away_means_skip",
                            ),
                            (
                                "reason_people_will_overreact_keep_against_will",
                                "reason_people_will_overreact_keep_against_will",
                            ),
                            (
                                "reason_people_will_overreact_keep_against_will_skip",
                                "reason_people_will_overreact_keep_against_will_skip",
                            ),
                            ("reason_dont_want_to_talk", "reason_dont_want_to_talk"),
                            (
                                "reason_dont_want_to_talk_all",
                                "reason_dont_want_to_talk_all",
                            ),
                            (
                                "reason_dont_want_to_talk_all_skip",
                                "reason_dont_want_to_talk_all_skip",
                            ),
                            ("lethal_means_too_shameful", "lethal_means_too_shameful"),
                            ("lethal_means_dont_need", "lethal_means_dont_need"),
                            ("lethal_means_get_rid", "lethal_means_get_rid"),
                            ("lethal_means_not_stable", "lethal_means_not_stable"),
                            ("lethal_means_want_to_keep", "lethal_means_want_to_keep"),
                            (
                                "lethal_means_afraid_hospital",
                                "lethal_means_afraid_hospital",
                            ),
                            (
                                "lethal_means_too_depressed",
                                "lethal_means_too_depressed",
                            ),
                            ("means_describe_review", "means_describe_review"),
                            ("consider_reducing_access", "consider_reducing_access"),
                            ("strategies_general", "strategies_general"),
                            ("additional_strategies", "additional_strategies"),
                            ("means_custom", "means_custom"),
                            ("means_support", "means_support"),
                            ("means_willing", "means_willing"),
                            ("thank_you_means", "thank_you_means"),
                            ("crisis_desc", "crisis_desc"),
                            ("get_help", "get_help"),
                            ("ok_ready", "ok_ready"),
                            ("comfort_and_skills", "comfort_and_skills"),
                            ("shared_stories", "shared_stories"),
                            ("view_card1", "view_card1"),
                            ("when_things_get_hard", "when_things_get_hard"),
                            ("coping_body", "coping_body"),
                            ("coping_distract", "coping_distract"),
                            ("coping_help_others", "coping_help_others"),
                            ("coping_courage", "coping_courage"),
                            ("coping_senses", "coping_senses"),
                            ("supportive_people", "supportive_people"),
                            ("coping_top", "coping_top"),
                            ("view_card2", "view_card2"),
                            ("reasons_live_edit", "reasons_live_edit"),
                            ("view_card3", "view_card3"),
                            ("warning_stressors", "warning_stressors"),
                            ("warning_thoughts", "warning_thoughts"),
                            ("warning_feelings", "warning_feelings"),
                            ("warning_actions", "warning_actions"),
                            ("ws_top", "ws_top"),
                            ("view_card4", "view_card4"),
                            ("stability_rehearsal", "stability_rehearsal"),
                            ("stability_confidence", "stability_confidence"),
                            ("talk_it_through", "talk_it_through"),
                            ("readiness", "readiness"),
                            ("readiness_no", "readiness_no"),
                            ("readiness_yes_reasons", "readiness_yes_reasons"),
                            ("readiness_yes_changed", "readiness_yes_changed"),
                            ("thanks_plan_to_cope", "thanks_plan_to_cope"),
                            ("walk_through", "walk_through"),
                            ("rate_distress1", "rate_distress1"),
                            ("rate_frustration1", "rate_frustration1"),
                            ("checkin_thank_you", "checkin_thank_you"),
                            ("will_check_in", "will_check_in"),
                            ("take_care", "take_care"),
                        ],
                        max_length=63,
                        null=True,
                        verbose_name="Current Section UID",
                    ),
                ),
                (
                    "rate_psych",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "most_painful",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rate_stress",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "most_stress",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rate_agitation",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "causes_agitation",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rate_hopeless",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "most_hopeless",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rate_self_hate",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "most_hate",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "rank_feelings",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=9, null=True
                    ),
                ),
                (
                    "suicide_risk",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "suicidal_yourself",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "suicidal_others",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "reasons_live",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000), null=True, size=5
                    ),
                ),
                (
                    "reasons_die",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000), null=True, size=5
                    ),
                ),
                (
                    "wish_live",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(8),
                        ],
                    ),
                ),
                (
                    "wish_die",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(8),
                        ],
                    ),
                ),
                (
                    "one_thing",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "suicidal_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "suicidal_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "suicidal_freq",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True, null=True
                    ),
                ),
                (
                    "suicidal_freq_units",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[("day", "Day"), ("week", "Week"), ("month", "Month")],
                        max_length=7,
                        null=True,
                    ),
                ),
                (
                    "length_suicidal_thought",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10, null=True
                    ),
                ),
                (
                    "worse_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "worse_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "plan_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "plan_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "means_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "means_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "firearms_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "firearms_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "steps_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "steps_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "practiced_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "practiced_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "intent_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "intent_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "current_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "current_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "times_tried",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("once", "Single Attempt"),
                            ("many", "Multiple Attempts (2 or more)"),
                        ],
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "times_tried_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "nssi_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "nssi_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "hospitalized_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "hospitalized_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "impulsive_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "impulsive_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "abuse_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "abuse_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "losses_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "losses_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "relationship_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "relationship_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "burden_on_others_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "burden_on_others_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "health_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "health_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "sleep_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "sleep_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "legal_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "legal_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "shame_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "shame_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "skip_lethal_means",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "skip_reason",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Too tired", "Too tired"),
                            ("Too private", "Too private"),
                            (
                                "I'm worried people will overreact",
                                "I'm worried people will overreact",
                            ),
                            (
                                "I'm not sure I want to talk about it",
                                "I'm not sure I want to talk about it",
                            ),
                            ("It's too shameful", "It's too shameful"),
                            ("I don't need to do this", "I don't need to do this"),
                            ("Cannot get rid of means", "Cannot get rid of means"),
                            (
                                "Not sure I want to be stable",
                                "Not sure I want to be stable",
                            ),
                            ("I want to keep my means", "I want to keep my means"),
                            (
                                "I'm afraid this will keep me in the hospital",
                                "I'm afraid this will keep me in the hospital",
                            ),
                            (
                                "I feel too depressed or overwhelmed",
                                "I feel too depressed or overwhelmed",
                            ),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "too_private_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "overreact_specific",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Take away means", "Take away means"),
                            (
                                "Keep me in hospital against my will",
                                "Keep me in hospital against my will",
                            ),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "overreact_take_away_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "overreact_keep_me_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "reason_not_sure_talk",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            (
                                "I'll be forced to do something I don't want to do",
                                "I'll be forced to do something I don't want to do",
                            ),
                            (
                                "I'm undecided if I want to kill myself",
                                "I'm undecided if I want to kill myself",
                            ),
                            (
                                "I want to kill myself and don't want to be blocked",
                                "I want to kill myself and don't want to be blocked",
                            ),
                            (
                                "I don't want my answers about this recorded",
                                "I don't want my answers about this recorded",
                            ),
                            (
                                "I'm mixed about reducing access",
                                "I'm mixed about reducing access",
                            ),
                            (
                                "Having access is comforting - I have a way out",
                                "Having access is comforting - I have a way out",
                            ),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "not_sure_talk_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "too_shameful_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "do_not_need_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "cannot_rid_means_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "stable_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "keep_means_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "keep_in_hospital_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "feel_depressed_dec",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Yes, I'll think with you", "Yes, I'll think with you"),
                            ("Skip for now", "Skip for now"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "strategies_general",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_firearm",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_medicine",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_places",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_other",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "strategies_custom",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "means_support_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        null=True
                    ),
                ),
                (
                    "means_support_who",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "means_willing",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("Very willing", "Very willing"),
                            ("Mixed/Unsure", "Mixed/Unsure"),
                            ("Not willing", "Not willing"),
                        ],
                        max_length=31,
                        null=True,
                    ),
                ),
                (
                    "crisis_desc",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "coping_body",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_distract",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_help_others",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_courage",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_senses",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "supportive_people",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=django.contrib.postgres.fields.jsonb.JSONField(),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "coping_top",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_stressors",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_thoughts",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_feelings",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_actions",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ws_top",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(max_length=10000),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "stability_rehearsal",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "stability_confidence",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "willing_to_talk",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("Yes, I'm good with that", "Yes, I'm good with that"),
                            ("No, just provider", "No, just provider"),
                        ],
                        max_length=127,
                        null=True,
                    ),
                ),
                (
                    "readiness",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("Not at all ready", "Not at all ready"),
                            ("Somewhat ready", "Somewhat ready"),
                            ("Very ready", "Very ready"),
                        ],
                        max_length=127,
                        null=True,
                    ),
                ),
                (
                    "readiness_no",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "readiness_yes_reasons",
                    jaspr.apps.common.fields.encrypted_array_field.EncryptedArrayField(
                        base_field=models.CharField(
                            choices=[
                                (
                                    "I need to take care of my obligations",
                                    "I need to take care of my obligations",
                                ),
                                (
                                    "I feel better and calmer",
                                    "I feel better and calmer",
                                ),
                                ("I feel ready to cope", "I feel ready to cope"),
                                ("My urge has gone down", "My urge has gone down"),
                                (
                                    "This was a misunderstanding",
                                    "This was a misunderstanding",
                                ),
                                ("I'm frustrated", "I'm frustrated"),
                                (
                                    "People who support me understand how serious I am",
                                    "People who support me understand how serious I am",
                                ),
                                (
                                    "My circumstances have changed",
                                    "My circumstances have changed",
                                ),
                            ],
                            max_length=127,
                            null=True,
                        ),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "readiness_yes_changed",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "walk_through",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[("Got it", "Got it"), ("Sounds good", "Sounds good")],
                        max_length=31,
                        null=True,
                    ),
                ),
                (
                    "will_check_in",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ("Got it", "Got it"),
                            ("Okay, talk to you later", "Okay, talk to you later"),
                        ],
                        max_length=31,
                        null=True,
                    ),
                ),
                (
                    "time_here",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            ("Just got here", "Just got here"),
                            (
                                "At least a few hours, less than 24 hours",
                                "At least a few hours, less than 24 hours",
                            ),
                            ("More than 24 hours", "More than 24 hours"),
                        ],
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    "distress0",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "frustration0",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "check_in_time0",
                    fernet_fields.fields.EncryptedDateTimeField(null=True),
                ),
                (
                    "distress1",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "frustration1",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "check_in_time1",
                    fernet_fields.fields.EncryptedDateTimeField(null=True),
                ),
                (
                    "distress2",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "frustration2",
                    jaspr.apps.common.fields.encrypted_positive_small_integer_field.EncryptedPositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "check_in_time2",
                    fernet_fields.fields.EncryptedDateTimeField(null=True),
                ),
                (
                    "readiness_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "readiness_changed",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=10000, null=True
                    ),
                ),
                (
                    "reason_live1",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_live2",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_live3",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_live4",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_live5",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die1",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die2",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die3",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die4",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "reason_die5",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=30, null=True
                    ),
                ),
                (
                    "rank_reason_live",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=9, null=True
                    ),
                ),
                (
                    "rank_reason_die",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=9, null=True
                    ),
                ),
                (
                    "history_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        editable=False, null=True
                    ),
                ),
                (
                    "history_yes_no_describe",
                    fernet_fields.fields.EncryptedTextField(
                        blank=True, editable=False, null=True
                    ),
                ),
                (
                    "manual_coping",
                    fernet_fields.fields.EncryptedTextField(
                        blank=True, editable=False, null=True
                    ),
                ),
                (
                    "ws_sensations",
                    fernet_fields.fields.EncryptedTextField(
                        blank=True, editable=False, null=True
                    ),
                ),
                (
                    "ws_emotions",
                    fernet_fields.fields.EncryptedTextField(
                        blank=True, editable=False, null=True
                    ),
                ),
                (
                    "readiness1_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        editable=False, null=True
                    ),
                ),
                (
                    "readiness1_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=250, null=True
                    ),
                ),
                (
                    "readiness1_yes_no_choice",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            (
                                "I have obligations I need to take care of",
                                "I have obligations I need to take care of",
                            ),
                            ("I feel better and calmer", "I feel better and calmer"),
                            ("I feel ready to cope", "I feel ready to cope"),
                            (
                                "I'm thinking more clearly now",
                                "I'm thinking more clearly now",
                            ),
                            ("My urge has gone down", "My urge has gone down"),
                            (
                                "This was a misunderstanding",
                                "This was a misunderstanding",
                            ),
                            ("I'm frustrated", "I'm frustrated"),
                            (
                                "I've had insights/awareness I didn't have before I came in",
                                "I've had insights/awareness I didn't have before I came in",
                            ),
                            (
                                "People who support me understand how serious I am",
                                "People who support me understand how serious I am",
                            ),
                            (
                                "My circumstances have changed",
                                "My circumstances have changed",
                            ),
                        ],
                        editable=False,
                        max_length=127,
                        null=True,
                    ),
                ),
                (
                    "readiness2_yes_no",
                    jaspr.apps.common.fields.encrypted_boolean_field.EncryptedBooleanField(
                        editable=False, null=True
                    ),
                ),
                (
                    "readiness2_yes_no_describe",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, editable=False, max_length=250, null=True
                    ),
                ),
                (
                    "readiness2_yes_no_choice",
                    fernet_fields.fields.EncryptedCharField(
                        choices=[
                            (
                                "I have obligations I need to take care of",
                                "I have obligations I need to take care of",
                            ),
                            ("I feel better and calmer", "I feel better and calmer"),
                            ("I feel ready to cope", "I feel ready to cope"),
                            (
                                "I'm thinking more clearly now",
                                "I'm thinking more clearly now",
                            ),
                            ("My urge has gone down", "My urge has gone down"),
                            (
                                "This was a misunderstanding",
                                "This was a misunderstanding",
                            ),
                            ("I'm frustrated", "I'm frustrated"),
                            (
                                "I've had insights/awareness I didn't have before I came in",
                                "I've had insights/awareness I didn't have before I came in",
                            ),
                            (
                                "People who support me understand how serious I am",
                                "People who support me understand how serious I am",
                            ),
                            (
                                "My circumstances have changed",
                                "My circumstances have changed",
                            ),
                        ],
                        editable=False,
                        max_length=127,
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Assessment",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCopingStrategy",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Administrative name.", max_length=100
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        help_text="Public title of this coping strategy, currently used to connect frontend to backend as a key.",
                        max_length=100,
                    ),
                ),
                ("image", models.TextField(max_length=100)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Coping Strategy",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCopingStrategyCategory",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                ("slug", models.CharField(db_index=True, max_length=100)),
                (
                    "why_text",
                    models.TextField(
                        blank=True,
                        help_text="Text that will appear after clicking 'The why behind this'",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Coping Strategy Category",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalGuideMessage",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Administrative name.", max_length=100
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        help_text="Text that will appear after clicking 'The why behind this'",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Guide Message",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPatient",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "ssid",
                    models.CharField(
                        db_index=True,
                        help_text="This is the subject study id for patients. Set by Technicians upon patient creation/onboarding.",
                        max_length=25,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="SSIDs can only contain letters, numbers, hyphens, and underscores.",
                                regex="^[-a-zA-Z0-9_]+\\Z",
                            )
                        ],
                    ),
                ),
                (
                    "guide",
                    models.CharField(
                        blank=True,
                        choices=[("Jaz", "Jaz"), ("Jasper", "Jasper")],
                        help_text="This is the currently preferred guide.",
                        max_length=15,
                    ),
                ),
                (
                    "session_validation_attempts",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Number of times that session-validate has been called without success up to 6.  After 6 attempts, all further attempts are failed automatically without recording.",
                        verbose_name="Session Validation Attempts",
                    ),
                ),
                (
                    "last_heartbeat",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time frontend pinged backend using heartbeat endpoint.",
                        null=True,
                        verbose_name="Last Heartbeat",
                    ),
                ),
                (
                    "session_lock",
                    models.BooleanField(
                        default=False,
                        help_text="When True, patient must validate session to gain access to endpoints requiring recent heartbeat.",
                        verbose_name="Session Lock",
                    ),
                ),
                (
                    "tour_complete",
                    models.BooleanField(
                        default=False,
                        help_text="When a patient has completed the intro tour, this will get marked True.",
                        verbose_name="Tour Complete",
                    ),
                ),
                (
                    "onboarded",
                    models.BooleanField(
                        default=False,
                        help_text="Has the patient been onboarded (currently in JAH)?",
                        verbose_name="JAH Onboarding",
                    ),
                ),
                (
                    "tools_to_go_status",
                    models.CharField(
                        choices=[
                            ("Not Started", "Not Started"),
                            ("Email Sent", "Email Sent"),
                            ("Phone Number Verified", "Phone Number Verified"),
                            ("Setup Finished", "Setup Finished"),
                        ],
                        default="Not Started",
                        help_text="The current status for tools to go. The flow starts at 'Not Started' and ends at 'Setup Finished'.",
                        max_length=31,
                        verbose_name="Tools to Go Status",
                    ),
                ),
                (
                    "current_walkthrough_step_changed",
                    model_utils.fields.MonitorField(
                        blank=True,
                        default=django.utils.timezone.now,
                        help_text="This field changes programatically when current_walkthrough_step is modified.",
                        monitor="current_walkthrough_step_id",
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Patient",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPatientActivity",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("rating", models.PositiveSmallIntegerField(default=None, null=True)),
                (
                    "save_for_later",
                    models.BooleanField(
                        default=None, null=True, verbose_name="Save For Later"
                    ),
                ),
                ("viewed", models.DateTimeField(default=None, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Patient Activity",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPatientCopingStrategy",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Public title of this coping strategy, currently used to connect frontend to backend as a key.",
                        max_length=100,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Patient Coping Strategy",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPatientVideo",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("rating", models.PositiveSmallIntegerField(default=None, null=True)),
                (
                    "save_for_later",
                    models.BooleanField(
                        default=None, null=True, verbose_name="Save For Later"
                    ),
                ),
                ("viewed", models.DateTimeField(default=None, null=True)),
                (
                    "progress",
                    models.PositiveSmallIntegerField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Patient Video",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPerson",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(db_index=True, max_length=40, verbose_name="Name"),
                ),
                (
                    "image_1x",
                    models.TextField(
                        help_text="Low resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        verbose_name="Image @ 1X",
                    ),
                ),
                (
                    "image_2x",
                    models.TextField(
                        help_text="Medium resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        verbose_name="Image @ 2X",
                    ),
                ),
                (
                    "image_3x",
                    models.TextField(
                        help_text="High resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        verbose_name="Image @ 3X",
                    ),
                ),
                (
                    "label_color",
                    colorful.fields.RGBColorField(
                        blank=True, verbose_name="Label Color"
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(default=0, verbose_name="Order"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Person",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSharedStory",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(default=0, verbose_name="Order"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Shared Story",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalTechnician",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "first_name",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=63, verbose_name="First Name"
                    ),
                ),
                (
                    "last_name",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=63, verbose_name="Last Name"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Technician",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalTopic",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(db_index=True, max_length=40, verbose_name="Name"),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        db_index=True, default=0, verbose_name="Order"
                    ),
                ),
                (
                    "label_color",
                    colorful.fields.RGBColorField(
                        blank=True, verbose_name="Label Color"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Topic",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="JasprSession",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[("Technician", "Technician"), ("Patient", "Patient")],
                        max_length=31,
                        verbose_name="User Type",
                    ),
                ),
                ("in_er", models.BooleanField(verbose_name="In ER?")),
                ("from_native", models.BooleanField(verbose_name="From Native?")),
                ("long_lived", models.BooleanField(verbose_name="Long Lived?")),
            ],
            options={
                "verbose_name": "Jaspr Session",
                "verbose_name_plural": "Jaspr Sessions",
            },
        ),
        migrations.CreateModel(
            name="Patient",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "ssid",
                    models.CharField(
                        help_text="This is the subject study id for patients. Set by Technicians upon patient creation/onboarding.",
                        max_length=25,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="SSIDs can only contain letters, numbers, hyphens, and underscores.",
                                regex="^[-a-zA-Z0-9_]+\\Z",
                            )
                        ],
                    ),
                ),
                (
                    "guide",
                    models.CharField(
                        blank=True,
                        choices=[("Jaz", "Jaz"), ("Jasper", "Jasper")],
                        help_text="This is the currently preferred guide.",
                        max_length=15,
                    ),
                ),
                (
                    "session_validation_attempts",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Number of times that session-validate has been called without success up to 6.  After 6 attempts, all further attempts are failed automatically without recording.",
                        verbose_name="Session Validation Attempts",
                    ),
                ),
                (
                    "last_heartbeat",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time frontend pinged backend using heartbeat endpoint.",
                        null=True,
                        verbose_name="Last Heartbeat",
                    ),
                ),
                (
                    "session_lock",
                    models.BooleanField(
                        default=False,
                        help_text="When True, patient must validate session to gain access to endpoints requiring recent heartbeat.",
                        verbose_name="Session Lock",
                    ),
                ),
                (
                    "tour_complete",
                    models.BooleanField(
                        default=False,
                        help_text="When a patient has completed the intro tour, this will get marked True.",
                        verbose_name="Tour Complete",
                    ),
                ),
                (
                    "onboarded",
                    models.BooleanField(
                        default=False,
                        help_text="Has the patient been onboarded (currently in JAH)?",
                        verbose_name="JAH Onboarding",
                    ),
                ),
                (
                    "tools_to_go_status",
                    models.CharField(
                        choices=[
                            ("Not Started", "Not Started"),
                            ("Email Sent", "Email Sent"),
                            ("Phone Number Verified", "Phone Number Verified"),
                            ("Setup Finished", "Setup Finished"),
                        ],
                        default="Not Started",
                        help_text="The current status for tools to go. The flow starts at 'Not Started' and ends at 'Setup Finished'.",
                        max_length=31,
                        verbose_name="Tools to Go Status",
                    ),
                ),
                (
                    "current_walkthrough_step_changed",
                    model_utils.fields.MonitorField(
                        blank=True,
                        default=django.utils.timezone.now,
                        help_text="This field changes programatically when current_walkthrough_step is modified.",
                        monitor="current_walkthrough_step_id",
                        null=True,
                    ),
                ),
                (
                    "clinic_location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="clinics.ClinicLocation",
                        verbose_name="Clinic Location",
                    ),
                ),
                (
                    "current_privacy_screen_images",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Privacy Screen Images used during validation (must include chosen).",
                        related_name="_patient_current_privacy_screen_images_+",
                        to="awsmedia.PrivacyScreenImage",
                        verbose_name="Current Privacy Screen Images",
                    ),
                ),
            ],
            options={"verbose_name": "Patient", "verbose_name_plural": "Patients",},
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=40, unique=True, verbose_name="Name"),
                ),
                (
                    "image_1x",
                    models.ImageField(
                        help_text="Low resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        upload_to="",
                        verbose_name="Image @ 1X",
                    ),
                ),
                (
                    "image_2x",
                    models.ImageField(
                        help_text="Medium resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        upload_to="",
                        verbose_name="Image @ 2X",
                    ),
                ),
                (
                    "image_3x",
                    models.ImageField(
                        help_text="High resolution image: Run through tiny png before uploading here.",
                        max_length=510,
                        upload_to="",
                        verbose_name="Image @ 3X",
                    ),
                ),
                (
                    "label_color",
                    colorful.fields.RGBColorField(
                        blank=True, verbose_name="Label Color"
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(default=0, verbose_name="Order"),
                ),
            ],
            options={"verbose_name": "Person", "verbose_name_plural": "People",},
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=40, unique=True, verbose_name="Name"),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        default=0, unique=True, verbose_name="Order"
                    ),
                ),
                (
                    "label_color",
                    colorful.fields.RGBColorField(
                        blank=True, verbose_name="Label Color"
                    ),
                ),
            ],
            options={"verbose_name": "Topic", "verbose_name_plural": "Topics",},
        ),
        migrations.CreateModel(
            name="Technician",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "first_name",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=63, verbose_name="First Name"
                    ),
                ),
                (
                    "last_name",
                    fernet_fields.fields.EncryptedCharField(
                        blank=True, max_length=63, verbose_name="Last Name"
                    ),
                ),
                (
                    "clinic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="clinics.Clinic"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="technician",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Technician",
                "verbose_name_plural": "Technicians",
            },
        ),
        migrations.CreateModel(
            name="SharedStory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(default=0, verbose_name="Order"),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="kiosk.Person",
                        verbose_name="Person",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="kiosk.Topic",
                        verbose_name="Topic",
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        limit_choices_to=models.Q(file_type="video"),
                        on_delete=django.db.models.deletion.PROTECT,
                        to="awsmedia.Media",
                        verbose_name="Video",
                    ),
                ),
            ],
            options={
                "verbose_name": "Shared Story",
                "verbose_name_plural": "Shared Stories",
            },
        ),
        migrations.CreateModel(
            name="PatientVideo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("rating", models.PositiveSmallIntegerField(default=None, null=True)),
                (
                    "save_for_later",
                    models.BooleanField(
                        default=None, null=True, verbose_name="Save For Later"
                    ),
                ),
                ("viewed", models.DateTimeField(default=None, null=True)),
                (
                    "progress",
                    models.PositiveSmallIntegerField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kiosk.Patient",
                        verbose_name="Patient",
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="awsmedia.Media"
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient Video",
                "verbose_name_plural": "Patient Videos",
            },
        ),
        migrations.CreateModel(
            name="PatientCopingStrategy",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Public title of this coping strategy, currently used to connect frontend to backend as a key.",
                        max_length=100,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="kiosk.CopingStrategyCategory",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="kiosk.Patient"
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient Coping Strategy",
                "verbose_name_plural": "Patient Coping Strategies",
                "ordering": ("title",),
            },
        ),
        migrations.CreateModel(
            name="PatientActivity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("rating", models.PositiveSmallIntegerField(default=None, null=True)),
                (
                    "save_for_later",
                    models.BooleanField(
                        default=None, null=True, verbose_name="Save For Later"
                    ),
                ),
                ("viewed", models.DateTimeField(default=None, null=True)),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="kiosk.Activity"
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kiosk.Patient",
                        verbose_name="Patient",
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient Activity",
                "verbose_name_plural": "Patient Activities",
            },
        ),
    ]
