# Generated by Django 2.2.13 on 2020-06-19 21:32

import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import simple_history.models
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("taggit", "0003_taggeditem_add_unique_index"),
    ]

    operations = [
        migrations.CreateModel(
            name="PrivacyScreenImage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "Active"), ("archived", "Archived")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("image", models.ImageField(max_length=510, upload_to="")),
            ],
            options={
                "verbose_name": "Privacy Screen Image",
                "verbose_name_plural": "Privacy Screen Images",
            },
        ),
        migrations.CreateModel(
            name="Media",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("active", "active"), ("inactive", "inactive")],
                        default="active",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("name", models.CharField(max_length=256, unique=True)),
                ("description", models.TextField(blank=True)),
                ("transcript", models.TextField(blank=True)),
                ("tips", models.TextField(blank=True, default="")),
                ("completion_time", models.IntegerField(blank=True, null=True)),
                ("duration", models.IntegerField(blank=True, null=True)),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("worksheet", "worksheet"),
                            ("video", "video"),
                            ("audio", "audio"),
                            ("graphic", "graphic"),
                            ("exercise", "exercise"),
                            ("discussion points", "discussion points"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "transcode_status",
                    models.CharField(
                        choices=[
                            ("new", "new"),
                            ("queued", "queued"),
                            ("completed", "completed"),
                            ("non-video", "non-video"),
                        ],
                        default="new",
                        max_length=25,
                    ),
                ),
                ("order", models.PositiveSmallIntegerField(default=0)),
                (
                    "file_field",
                    models.FileField(
                        max_length=510, upload_to="", verbose_name="File Field"
                    ),
                ),
                (
                    "subtitle_file",
                    models.FileField(
                        blank=True,
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="Subtitle File",
                    ),
                ),
                (
                    "poster",
                    models.ImageField(
                        blank=True,
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="Poster",
                    ),
                ),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True,
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="Thumbnail",
                    ),
                ),
                (
                    "fpm4_transcode",
                    models.FileField(
                        blank=True,
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="FMP4 Transcode",
                    ),
                ),
                (
                    "mp4_transcode",
                    models.FileField(
                        blank=True,
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="MP4 Transcode",
                    ),
                ),
                (
                    "mp3_transcode",
                    models.FileField(
                        blank=True,
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="MP3 Transcode",
                    ),
                ),
                (
                    "hls_playlist",
                    models.FileField(
                        blank=True,
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="HLS Playlist",
                    ),
                ),
                (
                    "dash_playlist",
                    models.FileField(
                        blank=True,
                        max_length=510,
                        null=True,
                        upload_to="",
                        verbose_name="Dash Playlist",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={"verbose_name": "Media", "verbose_name_plural": "Media",},
        ),
        migrations.CreateModel(
            name="HistoricalMedia",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[("choice1", "choice1"), ("choice2", "choice2")],
                        default="choice1",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=256)),
                ("description", models.TextField(blank=True)),
                ("transcript", models.TextField(blank=True)),
                ("tips", models.TextField(blank=True, default="")),
                ("completion_time", models.IntegerField(blank=True, null=True)),
                ("duration", models.IntegerField(blank=True, null=True)),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("worksheet", "worksheet"),
                            ("video", "video"),
                            ("audio", "audio"),
                            ("graphic", "graphic"),
                            ("exercise", "exercise"),
                            ("discussion points", "discussion points"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "transcode_status",
                    models.CharField(
                        choices=[
                            ("new", "new"),
                            ("queued", "queued"),
                            ("completed", "completed"),
                            ("non-video", "non-video"),
                        ],
                        default="new",
                        max_length=25,
                    ),
                ),
                ("order", models.PositiveSmallIntegerField(default=0)),
                (
                    "file_field",
                    models.TextField(max_length=510, verbose_name="File Field"),
                ),
                (
                    "subtitle_file",
                    models.TextField(
                        blank=True,
                        max_length=510,
                        null=True,
                        verbose_name="Subtitle File",
                    ),
                ),
                (
                    "poster",
                    models.TextField(
                        blank=True, max_length=510, null=True, verbose_name="Poster"
                    ),
                ),
                (
                    "thumbnail",
                    models.TextField(
                        blank=True, max_length=510, null=True, verbose_name="Thumbnail"
                    ),
                ),
                (
                    "fpm4_transcode",
                    models.TextField(
                        blank=True,
                        max_length=510,
                        null=True,
                        verbose_name="FMP4 Transcode",
                    ),
                ),
                (
                    "mp4_transcode",
                    models.TextField(
                        blank=True,
                        max_length=510,
                        null=True,
                        verbose_name="MP4 Transcode",
                    ),
                ),
                (
                    "mp3_transcode",
                    models.TextField(
                        blank=True,
                        max_length=510,
                        null=True,
                        verbose_name="MP3 Transcode",
                    ),
                ),
                (
                    "hls_playlist",
                    models.TextField(
                        blank=True,
                        max_length=510,
                        null=True,
                        verbose_name="HLS Playlist",
                    ),
                ),
                (
                    "dash_playlist",
                    models.TextField(
                        blank=True,
                        max_length=510,
                        null=True,
                        verbose_name="Dash Playlist",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Media",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
